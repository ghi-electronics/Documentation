{
  "hardware/brainpad.html": {
    "href": "hardware/brainpad.html",
    "title": "BrainPad",
    "keywords": "BrainPad Educators now have the power to use their beloved language-of-choice with BrainPad devices, thanks to the power of the DUE platform. Both BrainPad Pulse and BrainPad Edge are fully supported. However, BrainPad Pulse include additional natively-supported, which are the display and the buzzer. BrainPad Pulse BrainPad Edge On-board Components Pulse Edge LED ✓ ✓ Button A ✓ ✓ Button B ✓ LCD ✓ Sound ✓ Visit the BrainPad website to learn about the product and see purchasing options. Getting Started The DUE getting started page shows the steps needed to start using the DUE Link ecosystem and coding options. Hardware Demos The edge connector on the supported BrainPad hardware combined with the ease of the DUE platform, open up many possibilities to try the existing accessories available on the market. Here are just a few: Smart House This example demonstrates the extensibility of the DUE platform. Using the DUE library from within full .NET. See the code samples repo for all the available sensors. We added a BrainClip IR remote control to our demo. Smart House Sample Repo A.I. Mask Detector Harnessing the power of A.I. on a tiny micro-controller is a challenge, but easy work for the DUE platform. In this example full Python is used with the DUE platform connecting the pieces together. A.I. Mask Detector Sample Repo NeoPixel Matrix NeoPixel Matrix panels pair well with the DUE platform, because NeoPixel support is built-in. Using DUE you can quickly create games, images, or led-effects. In our samples repo, we demonstrate using DUE Script, Python, and .NET. and make a simple Falling Bird Game. Falling Bird Sample Repo More NeoPixel Matrix Projects BrainGamer Sketch Creating art is easy when you pair the BrainPad Pulse with the BrainGamer BrainGamer Sketch Demo Prototyping The FEZ Single board computers (SBC) are excellent for building projects. They utilize the same ecosystem as the BrainPad but provides a smaller form factor. See the FEZ Page."
  },
  "hardware/fez.html": {
    "href": "hardware/fez.html",
    "title": "FEZ",
    "keywords": "FEZ These FEZ products can be used with the DUE platform. FEZ Flea The FEZ Flea form factor is the same as the Seeed Studio Xiao. This opens up the option for many existing accessories. The FEZ Flea can also be soldered to a PCB just like a SoM. FEZ Pico The FEZ Pico form factor is the same as the Raspberry Pi Pico. This opens up the option for many existing accessories. The FEZ Pico also includes a STEMMA connector that can connect to many existing STEMMA modules. Visit the GHI Electronics to learn about the product and see purchasing options. Beginner to Expert We recommend beginners start out with the BrainPad, it is made for beginners and scales up to advanced learning. The FEZ boards can then be used to start designing prototypes and proof of concepts. Low-volume products can be manufactured with ease, thanks to the small form factor and SMT solderability of the FEZ boards. Tip The heart to the FEZ boards is SITCore SC13 chipset. Getting Started The DUE getting started page shows steps needed start using the DUE Link ecosystem of coding options. Hardware Demos The supported hardware's form factor opens the opportunity to use some of the many available accessories on the market. Here are just a few examples. PicoMate The PicoMate is a single-pcb with multiple Grove compatible sensors that are removable or work in place. Samples in the repo demonstrate extending DUE with Python or .NET. PicoMate Samples Repo Grove Module Shields These Grove shields are a great way to connect the many Grove modules on the market to DUE. There are many drivers located in the DUE samples driver repo to get you started. Drivers Repo Qwiic/STEMMA QT Connector The built in JST connector on the FEZ Pico opens up the door for even more expansion options, using Qwiic or STEMMA QT sensors. LED Bar Demo Mikroe Click Shield for Pico Mikroe Electronica has 1000's of Click sensors available, this shield provides an interface to those modules. Our demo in DUE Samples repo uses the LEDRing Click module. Warning Click shield for Pi Pico has a major flaw. MISO and MOSI pins are swapped on board rev 1.00. LEDRing Click Module"
  },
  "hardware/intro.html": {
    "href": "hardware/intro.html",
    "title": "DUE Hardware",
    "keywords": "DUE Hardware The DUE platform is supported on several GHI Electronics' devices, including the educational BrainPad devices. If you're already a Maker then the FEZ options are a great place to jump in and start. If you're new to hardware then BrainPad is great option to get you started. Note All DUE supported hardware has an on-board LED. It can be called using 'L', 'l', or pin 108 dwrite(108,1) BrainPad Educators now have the power to use their beloved language-of-choice with BrainPad devices, thanks to the power of the DUE platform. Learn more... SITCore / FEZ The power of DUE is available on a Fast-and-Easy (FEZ) developer-friendly boards. Learn more..."
  },
  "index.html": {
    "href": "index.html",
    "title": "You're DUE for some physical computing!",
    "keywords": "You're DUE for some physical computing! Accessing hardware was never easier, thanks to DUE. Developer can now read sensors and control motors right from their favorite programming languages. DUE is a Dynamic, Universal, and Extensible platform that links devices to the physical world. These devices can be desktops, laptops, phones, or even a Raspberry PI. Developers have the option to use any modern operating system and use the programming language of their choice. Code in the language you choose! Developers have the choice to use any development environment and IDE they choose. Additionally, any modern operating system or language can be used. Some languages are supported out-of-the-box and others can be added easily. Start Immediately using the DUE Console The DUE Link platform includes a scripting language called DUE Script it run internally on any DUE-enabled hardware. This allows the device to run standalone independent from any host. This very easy-to-learn scripting language is inspired by BASIC and Python, giving the user the simplicity and flexibility they need. The on-line DUE Console lets developers start experimenting with DUE Script and the physical world in minutes...no installation is necessary! Hardware options The power of DUE is available on Fast-and-Easy (FEZ) maker-friendly boards FEZ Flea and FEZ Pico. Educators now have the power to use their beloved language-of-choice with BrainPad devices. Continuous Innovation GHI Electronics has been bridging the hardware-to-software gap since 2003 with modern platforms,devices,systems, and coding languages. GHI Electronics is yet again bringing you an new innovation to make physical computing accessible to everyone. Not just the hardware developer."
  },
  "README.html": {
    "href": "README.html",
    "title": "Documentation",
    "keywords": "Documentation This is the repository for all of our docs. To generate the docs locally: Clone/Fork the repo Open the command prompt in the documents' root folder (\"Run as Administrator\" may be necessary) Execute docfx --serve After executing the above command, a temporary webpage will appear to allow you to view the files in your browser fully rendered in HTML, for example http://localhost:8080. To install DocFX, please review and download from the following site: https://dotnet.github.io/docfx/. From there, you can go to the Getting Started page for instructions on how to install and you can go to Download Latest to download the most up to date DocFX files. Please note, you will not need to use the docfx init command as the initial JSON file is already present in our repository. WK<html>TOpdf is an optional part of the build process. You will find the needed files at the following address: https://wkhtmltopdf.org/downloads.html. Once downloaded, execute the command to install. Once installed, add the path to the installed binary to the environment variable PATH, for example \"C:\\Program Files\\wkhtmltopdf\\bin\"."
  },
  "software/coding-options/coding-options.html": {
    "href": "software/coding-options/coding-options.html",
    "title": "Coding Options",
    "keywords": "Coding Options The DUE Link Platform ships with multiple supported languages. Users interested in supporting other languages can convert one of the open-source libraries (such as Python) to their language of choice. The DUE samples repo show how the libraries can be used. Developers have the choice to use any development environment and IDE of choice. Including the simple to use DUE Console. Additionally, any modern operating system or language can be used. Some languages are supported out-of-the-box and others can be added. Language Software Support Python Full Library .NET Full Library JavaScript Demo Sample Swift Demo Sample C++ Demo Sample Excel Demo Sample Note This section talks about supported languages running on a host (computer, table, phone...etc.). DUE Platform also includes DUE Script allowing a DUE-enabled hardware to run independently. Open Source Libraries for the supported languages are provided open-source. We invite you to learn more about the internal workings of DUE Link and also invite you to support additional systems and languages. DUE Libraries repo. The Transport The host connects to a due device using a standard USB connection. All the necessary USB descriptors are built in a standard manner that no drivers are necessary. Once a device is plugged in, the host (computer, phone, Windows, Android, Mac...etc.) will detect and enable a new serial port. The library will then use this serial port to communicate with the DUE-enabled device. On Windows, the device manager can be used to see a list of available serial ports. Troubleshooting The DUE console is the perfect place to connect and verify functionality. The first thing to do when facing any troubles is making sure the device is loaded with the latest firmware. The instructions are found on the device's Hardware page. Next, verify that you have the latest library. Visit the Downloads page to download the latest library."
  },
  "software/coding-options/cpp.html": {
    "href": "software/coding-options/cpp.html",
    "title": "C++",
    "keywords": "C++ C++ is a high-level, general-purpose programming language that has been around for many years. An example can be found on the DUE samples repo: GitHub Samples Repo"
  },
  "software/coding-options/dotnet.html": {
    "href": "software/coding-options/dotnet.html",
    "title": ".NET",
    "keywords": ".NET The .NET DUE library allows full .NET programs to access physical sensors and actuators. This allows complex .NET programs to do all the heavy lifting and send only the necessary components to control devices. The provided library is implemented in C# but the user can use any .NET system, such as Visual Basic. Setup This page assumes the user is already familiar with .NET C# and there is a development machine that is already setup to build and run .NET programs. No changes are needed there but we are using Microsoft Visual Studio Code as a personal preference. Tip If this is the first time you use your device, start by visiting the Hardware page and load your device with the appropriate firmware. The Console is also a great place to start. Start a new project with a simple line of code to test out the project is running Tip C# Top level statements feature is being utilized, but not required. Console.WriteLine(\"Hello, World!\"); Download and install the latest GHIElectronics.DUELink library from NuGet.org. Alternatively, get it from the Downloads page. Blinky! Our first program will blink the on-board LED 20 times, where it comes on for 200ms and then it is off for 800ms. Note We can access which COM port our DUE enable device is connected to by calling the GetConnectionPort() using GHIElectronics.DUELink; Console.WriteLine(\"Hello DUE!\"); var availablePort = DUELinkController.GetConnectionPort(); var dev = new DUELinkController(availablePort); dev.Led.Set(200, 800, 20); Console.WriteLine(\"Bye DUE!\"); .NET API The provided API mirrors DUE Script's Core library. Referencing those APIs is a good place to learn about the available functionality and available arguments. .NET API DUE Script Equivalent Description Analog.Read() ARead() Reads analog pin Analog.Write() AWrite() Reads analog pin Button.Enable() BtnEnable() Sets up a button to be used Button.WasPressed() BtnDown() Detects if button was pressed Button.IsReleased() BtnDown() Detects if button is released DeviceConfig.IsEdge() Version() Checks for specific hardware DeviceConfig.IsFlea() Version() Checks for specific hardware DeviceConfig.IsPico() Version() Checks for specific hardware DeviceConfig.IsPulse() Version() Checks for specific hardware DeviceConfig.MaxPinIO() NA Returns # available GPIOs DeviceConfig.MaxPinAnalog() NA Returns # available Analog pins Digital.Read() DRead() Reads digital pin Digital.Write() DWrite() Writes to digital pin Display.Clear() LcdClear() Clears the display black or white Display.Configuration() LcdConfig() Set display configuration Display.DrawBuffer() LcdStream() Updates the entire display, takes an array, using stream, with automatic Show() Display.DrawBufferBytes() LcdStream() Updates the entire display, takes bytes, using stream, with automatic Show() Display.DrawCircle() LcdCircle() Draws a circle on the display Display.DrawFillRect() LcdFill() Draws a filled rectangle on the display Display.DrawImage() LcdImg() Draws an image using an array Display.DrawImageBytes() LcdImg() Draws an image using bytes Display.DrawImageScale() LcdImg() Works same as DrawImage() adds scaling Display.DrawLine() LcdLine() Draws a line on the display Display.DrawRectangle() LcdRect() Draws a rectangle on the display Display.DrawText() LcdText() Draws a text on the display Display.DrawTextScale() LcdTextS() Draws scaled text on the display Display.SetPixel() LcdPixel() Draws pixel on the display Display.Show() LcdShow() Sends the display buffer Distance.Read() Distance() Used to read distance sensors Frequency() Freq() Hardware generated PWM signal I2c.Write() I2cStream() I2C write, using stream I2c.Read() I2cStream() I2C read, using stream I2c.WriteRead() I2cStream() I2C write/read, using stream Infrared.Enable() IrEnable() Enables pin for IR signal capture Infrared.Read() IrRead() Reads value from IR enabled pin Led.Set() LED() Controls the on-board LED Neo.Clear() NeoClear() Clears all LED's in memory Neo.SetColor() NeoSet() Set's a specific LED to a color Neo.Show() NeoShow() Transfers the internal pattern to LEDs Neo.SetMultiple() NeoStream() Updates all LEDs, using streams, with automatic Show() Led.Set() LED() Controls the on-board LED ServoMoto.Set() ServoSet() Sets servo motor connected to a pin Spi.Configuration() SpiCfg() Configures SPI bus Spi.Palette() Palette() Sets the desired color for a palette Spi.Read() SpiByte() Reads SPI byte Spi.Write() SpiByte() Sends SPI byte Spi.Write4bpp() Spi4Bpp() Streams and converts data from 4BPP to 16BPP Spi.WriteRead() SpiStream() Write & Read SPI bytes System.Beep() Beep() Uses any pin to generate a tone System.GetTickMicroseconds() TickUs() Returns system time in microseconds System.GetTickMilliseconds() TickMs() Returns system time in milliseconds System.Reset() Reset() Resets the board Touch.Read() TouchRead() Initialize a pin for touch Uart.BytesToRead() UartCount() How many bytes buffered and ready to read Uart.Enable() UartInit() Initialize UART Uart.Read() UartRead() Read UART data Uart.Write() UartWrite() Write UART data Version() Version() Returns the current DUE firmware version Note For convenience, the Pin Enum includes, ButtonA, ButtonB and Led. For example: dev.Digital.Write(dev.Pin.Led, True) DUE Script Control These methods allow developers to control DUE Scripts right from within .NET Method Description Script.Execute() Executes the single line of code immediately Script.IsRunning() Checks if DUE Script is running Script.Load() Loads the line into internal buffer Script.New() Clears the program stored in flash Script.Read() Read the program stored in flash and return as string Script.Record() Sends the internal buffer to the device, overwriting any previous programs Script.Run() Runs the program stored in flash This example will load a simple program line by line and then record it. dev.Script.Load(\"c = 10\"); dev.Script.Load(\"@Blink\"); dev.Script.Load(\"Led(100,100,c)\"); dev.Script.Record(); This is an example to execute a single line(immediate mode). This does not modify the application stored in flash. dev.Script.Execute(\"LED(200,200,10)\"); You can also access a previously recorder program using goto (to label) or by calling a function that has a return. This example calls the recorded program above. dev.Script.Execute(\"c=5:goto Blink\");"
  },
  "software/coding-options/excel.html": {
    "href": "software/coding-options/excel.html",
    "title": "Excel",
    "keywords": "Excel DUE Link allows supports many systems, and Microsoft Excel is one the supported options! Yes, you can access devices right from spreadsheets! Combine that with VB macros and you have unlimited options. Setup The access to the device is done though Excel Data Streamer plug-in. Enabling the streamer is simple as it is already built in: Go to File > Options In the Excel Options dialog click Add-ins At the bottom of the dialog in the Manage: drop-down select COM Add-ins and click Go Check the box for Microsoft Data Streamer for Excel You should now see the Data Streamer tab in the Excel ribbon. Connect the correct COM port and you will be presented with 4 new tabs (Data In, Data Out, Settings, and Manifest). Blinky! Our first program will blink the on-board LED 20 times, where it comes on for 200ms and then it is off for 800ms. Go to Settings and change the Data Channels to 1 Go to the Data Out tab and enter the following text right under CH1 column Led(200, 800, 20) The LED should be blinking now. The support for Excel is still in progress. Check back this page for more excitement!"
  },
  "software/coding-options/javascript.html": {
    "href": "software/coding-options/javascript.html",
    "title": "JavaScript",
    "keywords": "JavaScript JavaScript is one of the core technologies used by the World Wide Web. 98% of all websites use JavaScript. DUE integrates beautifully with JS, allowing web developers access to hardware devices. This website example shows a good example JavaScript DUE extensibility. demo.duelink.com The JavaScript DUE library allows for the use of full standard JavaScript to access physical-computing. Setup This page assumes the user is already familiar with JavaScript and there is a development machine that is already setup to build and run JavaScript programs. No changes are needed there but we are using Microsoft Visual Studio Code as a personal preference. Tip If this is the first time you use your device, start by visiting the Hardware page and load your device with the appropriate firmware. The Console is also a great place to start. Start a new project with a simple line of code to test out the project is running print(\"Hello DUE!\"); We now need to copy the DUE JavaScript library, check duelink.js, it contains driver for DUE. Tip The DUE Javascript library requires serial port access. Blinky! Our first program will blink the on-board LED 20 times, where it comes on for 200ms and then it is off for 800ms. Note Init device and choose com port with the method in the code sample below this.comPort = new SerialInterface(); comPort.Connect(); <script src=\"duelink.js\"></script> // ... if (!this.dev) this.dev = new DUELinkController(this.comPort); // Flash the LED 20 times (on for 200ms and off for 800ms) dev.Led.Set(200,800,20); console.log(\"Bye DUE!\"); JavaScript API The provided API mirrors DUE Script's Core library. Referencing those APIs is a good place to learn about the available functionality and available arguments. Python API DUE Script Equivalent Description Analog.Read() ARead() Reads analog pin Analog.Write() AWrite() Reads analog pin Button.Enable() BtnEnable() Sets up a button to be used Button.WasPressed() BtnDown() Detects if button is was pressed Button.IsReleased() BtnDown() Detects if button is released DeviceConfig.IsEdge() Version() Checks for specific hardware DeviceConfig.IsFlea() Version() Checks for specific hardware DeviceConfig.IsPico() Version() Checks for specific hardware DeviceConfig.IsPulse() Version() Checks for specific hardware DeviceConfig.MaxPinIO() NA Returns # available GPIOs DeviceConfig.MaxPinAnalog() NA Returns # available Analog pins Digital.Read() DRead() Reads digital pin Digital.Write() DWrite() Writes to digital pin Display.Clear() LcdClear() Clears the display black or white Display.CreateImage() LcdConfig() Set display configuration Display.Configuration() LcdConfig() Set display configuration Display.DrawBuffer() LcdStream() Updates the entire display, using stream, with automatic Show() Display.DrawBufferBytes() LcdStream() Updates the entire display, using stream, with automatic Show() Display.DrawCircle() LcdCircle() Draws a circle on the display Display.DrawFillRect() LcdFill() Draws a filled rectangle on the display Display.DrawImage() LcdImg() Draws an image using an array Display.DrawImageBytes() LcdImg() Draws an image using bytes Display.DrawImageScale() LcdImg() Works same as DrawImage() adds scaling Display.DrawLine() LcdLine() Draws a line on the display Display.DrawRectangle() LcdRect() Draws a rectangle on the display Display.DrawText() LcdText() Draws a text on the display Display.DrawTextScale() LcdTextS() Draws scaled text on the display Display.SetPixel() LcdPixel() Draws pixel on the display Display.Show() LcdShow() Sends the display buffer Distance.Read() Distance() Used to read distance sensors Frequency.Write() Freq() Hardware generated PWM signal I2c.Write() I2cStream() I2C write, using stream I2c.Read() I2cStream() I2C read, using stream I2c.WriteRead() I2cStream() I2C write/read, using stream Infrared.Enable() IrEnable() Enables pin for IR signal capture Infrared.Read() IrRead() Reads value from IR enabled pin Led.Set() LED() Controls the on-board LED Neo.Clear() NeoClear() Clears all LED's in memory Neo.SetColor() NeoSet() Set's a specific LED to a color Neo.Show() NeoShow() Transfers the internal pattern to LEDs Neo.SetMultiple() NeoStream() Updates all LEDs, using streams, with automatic Show() Led.Set() LED() Controls the on-board LED ServoMoto.Set() ServoSet() Sets servo motor connected to a pin Spi.Configuration() SpiCfg() Configures SPI bus Spi.Palette() Palette() Sets the desired color for a palette Spi.Read() SpiByte() Reads SPI byte Spi.Write() SpiByte() Sends SPI byte Spi.Write4bpp() Spi4Bpp() Streams and converts data from 4BPP to 16BPP Spi.WriteRead() SpiStream() Write & Read SPI bytes System.Beep() Beep() Uses any pin to generate a tone System.GetTickMicroseconds() TickUs() Returns system time in microseconds System.GetTickMilliseconds() TickMs() Returns system time in milliseconds System.Reset() Reset() Resets the board Touch.Read() TouchRead() Initialize a pin for touch Uart.BytesToRead() UartCount() How many bytes buffered and ready to read Uart.Enable() UartInit() Initialize UART Uart.Read() UartRead() Read UART data Uart.Write() UartWrite() Write UART data Version() Version() Returns the current DUE firmware version Note For convenience, the Pin Enum includes, ButtonA, ButtonB and Led. For example: dev.Digital.Write(dev.Pin.Led, True); DUE Script Control These methods allow developers to control DUE Scripts right from within JavaScript. Method Description Script.Execute() Executes the single line of code immediately Script.IsRunning() Checks if DUE Script is running Script.Load() Loads the line into internal buffer Script.New() Clears the program stored in flash Script.Read() Read the program stored in flash and return as string Script.Record() Sends the internal buffer to the device, overwriting any previous programs Script.Run() Runs the program stored in flash This example will load a simple program line by line and then record it. dev.Script.Load(\"c = 10\"); dev.Script.Load(\"@Blink\"); dev.Script.Load(\"Led(100,100,c)\"); dev.Script.Record(); This is an example to execute a single line(immediate mode). This does not modify the application stored in flash. dev.Script.Execute(\"LED(200,200,10)\"); You can also access a previously recorder program using goto (to label) or by calling a function that has a return. This example calls the recorded program above. dev.Script.Execute(\"c=5:goto Blink\");"
  },
  "software/coding-options/other.html": {
    "href": "software/coding-options/other.html",
    "title": "Other Languages",
    "keywords": "Other Languages A DUE-Link-powered device is an extension to the connected host. Any language with access to serial port (virtual USB) has access to the hardware. There are samples for language with a basic simple demo and there are complete libraries provided for some other languages. All the source codes for the demos are located at https://github.com/ghi-electronics/due-samples. The provided libraries are also open source, located at https://github.com/ghi-electronics/due-libraries"
  },
  "software/coding-options/python.html": {
    "href": "software/coding-options/python.html",
    "title": "Python",
    "keywords": "Python The Python DUE library allows for the use of full standard Python to access physical-computing. Setup This page assumes the user is already familiar with Python and there is a development machine that is already setup to build and run Python programs. No changes are needed there but we are using Microsoft Visual Studio Code as a personal preference. Tip If this is the first time you use your device, start by visiting the Hardware page and load your device with the appropriate firmware. The Console is also a great place to start. Start a new project with a simple line of code to test out the project is running print(\"Hello DUE!\") We now need to install the DUE Python library pip install DUELink. The DUELink package will also install all required dependencies. The library is also available on the downloads page if needed. Tip The DUE python library requires pyserial, which requires an admin access to install. Blinky! Our first program will blink the on-board LED 20 times, where it comes on for 200ms and then it is off for 800ms. Note Change the serial COM port number to match your port on the system you are using. from DUELink.DUELinkController import DUELinkController print(\"Hello DUE!\") availablePort = DUELinkController.GetConnectionPort() dev = DUELinkController(availablePort) # Flash the LED 20 times (on for 200ms and off for 800ms) dev.Led.Set(200,800,20) print(\"Bye DUE!\") Python API The provided API mirrors DUE Script's Core library. Referencing those APIs is a good place to learn about the available functionality and available arguments. Python API DUE Script Equivalent Description Analog.Read() ARead() Reads analog pin Analog.Write() AWrite() Reads analog pin Button.Enable() BtnEnable() Sets up a button to be used Button.WasPressed() BtnDown() Detects if button is was pressed Button.IsReleased() BtnDown() Detects if button is released DeviceConfig.IsEdge() Version() Checks for specific hardware DeviceConfig.IsFlea() Version() Checks for specific hardware DeviceConfig.IsPico() Version() Checks for specific hardware DeviceConfig.IsPulse() Version() Checks for specific hardware DeviceConfig.MaxPinIO() NA Returns # available GPIOs DeviceConfig.MaxPinAnalog() NA Returns # available Analog pins Digital.Read() DRead() Reads digital pin Digital.Write() DWrite() Writes to digital pin Display.Clear() LcdClear() Clears the display black or white Display.CreateImage() LcdConfig() Set display configuration Display.Configuration() LcdConfig() Set display configuration Display.DrawBuffer() LcdStream() Updates the entire display, using stream, with automatic Show() Display.DrawBufferBytes() LcdStream() Updates the entire display, using stream, with automatic Show() Display.DrawCircle() LcdCircle() Draws a circle on the display Display.DrawFillRect() LcdFill() Draws a filled rectangle on the display Display.DrawImage() LcdImg() Draws an image using an array Display.DrawImageBytes() LcdImg() Draws an image using bytes Display.DrawImageScale() LcdImg() Works same as DrawImage() adds scaling Display.DrawLine() LcdLine() Draws a line on the display Display.DrawRectangle() LcdRect() Draws a rectangle on the display Display.DrawText() LcdText() Draws a text on the display Display.DrawTextScale() LcdTextS() Draws scaled text on the display Display.SetPixel() LcdPixel() Draws pixel on the display Display.Show() LcdShow() Sends the display buffer Distance.Read() Distance() Used to read distance sensors Frequency.Write() Freq() Hardware generated PWM signal I2c.Write() I2cStream() I2C write, using stream I2c.Read() I2cStream() I2C read, using stream I2c.WriteRead() I2cStream() I2C write/read, using stream Infrared.Enable() IrEnable() Enables pin for IR signal capture Infrared.Read() IrRead() Reads value from IR enabled pin Led.Set() LED() Controls the on-board LED Neo.Clear() NeoClear() Clears all LED's in memory Neo.SetColor() NeoSet() Set's a specific LED to a color Neo.Show() NeoShow() Transfers the internal pattern to LEDs Neo.SetMultiple() NeoStream() Updates all LEDs, using streams, with automatic Show() Led.Set() LED() Controls the on-board LED ServoMoto.Set() ServoSet() Sets servo motor connected to a pin Spi.Configuration() SpiCfg() Configures SPI bus Spi.Palette() Palette() Sets the desired color for a palette Spi.Read() SpiByte() Reads SPI byte Spi.Write() SpiByte() Sends SPI byte Spi.Write4bpp() Spi4Bpp() Streams and converts data from 4BPP to 16BPP Spi.WriteRead() SpiStream() Write & Read SPI bytes System.Beep() Beep() Uses any pin to generate a tone System.GetTickMicroseconds() TickUs() Returns system time in microseconds System.GetTickMilliseconds() TickMs() Returns system time in milliseconds System.Reset() Reset() Resets the board Touch.Read() TouchRead() Initialize a pin for touch Uart.BytesToRead() UartCount() How many bytes buffered and ready to read Uart.Enable() UartInit() Initialize UART Uart.Read() UartRead() Read UART data Uart.Write() UartWrite() Write UART data Version() Version() Returns the current DUE firmware version Note For convenience, the Pin Enum includes, ButtonA, ButtonB and Led. For example: dev.Digital.Write(dev.Pin.Led, True) DUE Script Control These methods allow developers to control DUE Scripts right from within Python Method Description Script.Execute() Executes the single line of code immediately Script.IsRunning() Checks if DUE Script is running Script.Load() Loads the line into internal buffer Script.New() Clears the program stored in flash Script.Read() Read the program stored in flash and return as string Script.Record() Sends the internal buffer to the device, overwriting any previous programs Script.Run() Runs the program stored in flash This example will load a simple program line by line and then record it. dev.Script.Load(\"c = 10\") dev.Script.Load(\"@Blink\"); dev.Script.Load(\"Led(100,100,c)\") dev.Script.Record() This is an example to execute a single line(immediate mode). This does not modify the application stored in flash. dev.Script.Execute(\"LED(200,200,10)\") You can also access a previously recorder program using goto (to label) or by calling a function that has a return. This example calls the recorded program above. dev.Script.Execute(\"c=5:goto Blink\")"
  },
  "software/coding-options/swift.html": {
    "href": "software/coding-options/swift.html",
    "title": "Swift",
    "keywords": "Swift Swift can be used to give you physical access on MacOS devices. More examples can be found on the DUE samples repo: GitHub Samples Repo"
  },
  "software/console.html": {
    "href": "software/console.html",
    "title": "DUE Console",
    "keywords": "DUE Console The DUE Console provides many functionalities. It is a great start to verify the device is functioning properly. It is also a great place to learn about and use DUE Scripts and take advantage of the versatile DUE core libraries console.duelink.com Immediate Window The immediate text box sends and runs the code immediately on the DUE hardware as soon as the Enter key or arrow button is pressed. Try DWrite('L',1) to run the LED on and then DWrite('L',0) to turn it off. Output Window The DUE Output window is where DUE hardware will talk back to the console. The eraser button clears the Output window. Connect Select the connect button to connect to the DUE hardware. Record Sends the script in the editor window to the DUE hardware's flash. Play Runs the code that is stored in flash. Stop Stops the program running on the DUE hardware. List The List button loads the program currently stored in flash into the editor window. Download Saves the code in the consoles editor window to a text file. Load Loads a saved program into the editor. Docs Links to the DUE Script Documentation. Demos Select from pre-built DUE Script Demos that load into the edit window. Firmware Select and load the appropriate firmware to your device. Theme Changes the consoles theme to Light or Dark."
  },
  "software/downloads.html": {
    "href": "software/downloads.html",
    "title": "DUE Downloads",
    "keywords": "DUE Downloads The downloads on this page are automated through the many available on-line services. They are also made available here for convenience. Software status legend: Status Meaning Production (RTW) Ready to be used commercially (ready to wear). Release Candidate (RC) Could become a production release if proven solid. Preview Preview of the next release, not quite ready for production use. Firmware SC13 (FEZ Flea, FEZ Pico, BrainPad Pulse) File Date Status v1.0.3 2023-05-30 RC v1.0.2 2023-05-24 RC v1.0.1 2023-05-19 RC SC007 (BrainPad Edge) File Date Status v1.0.3 2023-05-30 RC v1.0.2 2023-05-24 RC v1.0.1 2023-05-19 RC Library .NET NuGet Library Tip These are hosted on NuGet.org. These downloads are optional. File Date Status v1.0.3 2023-05-30 RC v1.0.2 2023-05-24 RC v1.0.1 2023-05-19 RC Python Library Tip These are hosted on pypi.org and can be fetched using pip. These download are optional. File Date Status v1.0.3 2023-05-30 RC v1.0.2 2023-05-24 RC v1.0.1 2023-05-19 RC JavaScript Library File Date Status v1.0.3 2023-05-30 RC Release Notes v1.0.3: 2023-05-30 Firmware: Fixed issues with labels Library: Add DrawImage and DrawImageScale Library: Various improvements and changes v1.0.2: 2023-05-24 Add support for single wire distance sensors Support NeoPixel on any pin Array initialization, with multi line support Added LcdImage(), use an array to sprites Add support for Temp and Humidity sensors: DHT11 and DHT22 Remove Sound and open Frequency to support accept pins Support Beep in Pulse buzzer Duty cycle range on Frequency is now 0 to 100 Various improvements and changes v1.0.1: 2023-05-19 Complete API overhaul, Replacing v1.0.0. v1.0.0: 2023-05-05 Initial Release"
  },
  "software/due-script/corelib/analog.html": {
    "href": "software/due-script/corelib/analog.html",
    "title": "Analog",
    "keywords": "Analog These functions provide access to analog pins. Analog Write AWrite(pin, dutyCycle) - Writes to pin using PWM pin: pin number dutyCycle: 0 to 100 Note Frequency is fixed to 50hz. @Loop For i=0 to 100 Step 10 AWrite('L',i) Wait(100) next For i=100 to 0 Step -10 AWrite('L',i) Wait(100) Next Goto Loop Analog Read ARead(pin) - Read an analog output pin: pin number Returns: The analog value (0-100) of the pin Not all pins support ARead(). The hardware docs will show what pins support analog, typically labeled ADC. Pins that do not support ARead() will return 0. @Loop For i=0 to 100 x=ARead(0) PrintLn(x) Wait(100) Next Goto Loop"
  },
  "software/due-script/corelib/beep.html": {
    "href": "software/due-script/corelib/beep.html",
    "title": "Beep",
    "keywords": "Beep Beep uses any pin to generate a tone. Beep(pin, frequency, duration) - creates a tone for a specified duration on any pin pin: pin number, 'p' used with on-board piezo buzzer frequency: The frequency in Hz, max value is 10KHz duration: The duration of the beep in milliseconds, max value is 1000ms Tip Beep() supports the on-board buzzer on BrainPad Pulse, using 'p' in place of the pin number. Beep(0,256,1000) Beep('p',256,1000) Note This feature is blocking, so the rest of your code will stop until Beep() is completed."
  },
  "software/due-script/corelib/button.html": {
    "href": "software/due-script/corelib/button.html",
    "title": "Buttons",
    "keywords": "Buttons Buttons as a function are only available using pin 0,1,2,A,or B. Alternatively, DRead() can be used with any pin. BtnEnable(pin, enable) - sets up a button to be used pin: pin number, 'a', or 'b' enable: 1 = enable, 0 = disabled BtnUp(pin) pin: pin number, 'a', or 'b' Returns: 1 after release first time called. If called again returns 0 BtnDown(pin) Returns a value when button is pressed pin: pin number, 'a', or 'b' Returns: 1 if button was pressed and continues to return 1 until the button is released Note 'a' is ASCII a or 97, 'b' is ASCII b or 98. Using 'a', 'A', or 97 yields the same results. Tip The timeout for BtnDown() or BtnUp() is fixed to two seconds. Calling after two seconds from last press or release returns 0. If the button is not enabled also returns 0 BtnEnable('a',1) @Loop x=BtnDown('a') If x=1 PrintLn(\"Button A\") End Wait(200) Goto Loop"
  },
  "software/due-script/corelib/corelib.html": {
    "href": "software/due-script/corelib/corelib.html",
    "title": "Core Library",
    "keywords": "Core Library The core library gives DUE Scripts the necessary API to access hardware. It has other software related libraries as well. These API functions are available from within DUE Scripts and runs host-less. When using a host, a library for that particular language is provided to reflect the DUE Core library. For example, when using Python, the provided Python library includes dev.Led.Set(200,800,20) which mirrors the LED API. API Description Analog Read or Write analog pins Beep Beep using any pin Button Read a button. Similar to Digital read but handles debounce Digital Read or write digital pins Distance Read ultrasonic distance sensor Frequency Generate frequency on a specific pin. This uses hardware PWM internally I2C Access the I2C bus for transferring data Infrared Read and decode IR remote control signal LCD Draw on LCD (device specific) LED Control the on-board LED NeoPixel Control smart color LEDs Servo Control servo motors SPI Access the SPI data bus System Functions Built-in functions Temp-Humidity Works with DHT sensors Touch Allows for capacitive touch sensing UART Transfer data on the UART serial port"
  },
  "software/due-script/corelib/digital.html": {
    "href": "software/due-script/corelib/digital.html",
    "title": "Digital",
    "keywords": "Digital These functions provide access to digital pins. Digital Read DRead(pin, pull) - Read a digital pin output pin: pin number pull: Sets the internal pull resistors to -> 0=none, 1=up, 2=down Returns: 1 = high or 0 = low Note Pin numbers can also be 'a' or 'b' when reading the on-board buttons. Using 'a', 'A', or 97 yields the same results. x = DRead(2,1) If x = 0 Print(\"low\") Else Print(\"high\") End Digital Write DWrite(pin, state) - Sets a pins digital output pin: pin number state: 1 = high or 0 = low Note Pin numbers can also be 'l' when writing the on-board LED. Using 'l', 'L', or 108 yields the same results. for x = 1 to 10 DWrite('L',1) Wait(200) DWrite('L',0) Wait(200) next"
  },
  "software/due-script/corelib/distance.html": {
    "href": "software/due-script/corelib/distance.html",
    "title": "Distance Sensor",
    "keywords": "Distance Sensor This function is used when using a distance sensors. ReadDistance(trigger, echo) - uses ultrasonic sonic sensor to read distance. trigger: The pin number that is connected to trigger (pulse) signal echo: The pin number that is connected to echo signal, use -1 for single pin Returns: Distance in centimeters Tip most sensors need 5V to work. @Loop x = ReadDistance(0,1) If x>0 PrintLn(x) End Wait(100) Goto Loop"
  },
  "software/due-script/corelib/frequency.html": {
    "href": "software/due-script/corelib/frequency.html",
    "title": "Frequency",
    "keywords": "Frequency This hardware-backed feature generates frequencies/signals on a pin. Since this is hardware-backed, it only works on specific pin(s) and it is very accurate. It requires no system resources to run and therefore, the function is non-blocking. This signal can be used as PWM for power level control (similar to analog out). It can also be used to control servos, generate tones...etc. See the specific hardware's page pin-out for details on supported pin(s). Freq(pin, frequency, duration, dutyCycle) - provides an accurate hardware generated PWM signal pin: hardware specific pin number or 'p' for on-board piezo buzzer frequency: frequency in KHz duration: 0 to forever dutyCycle: 0 to 100 @Loop For x=1 to 1000 Freq('p',x,200,50) Wait(200) Next For x=1000 to 1 step -1 Freq('p',x,200,50) Wait(200) Next Goto Loop Since Freq() is a non-blocking function, it will return immediately even if duration is set to a future time. Making a second call to Freq() will terminate any existing active frequency, despite the duration of previous calls argument. In this example, 1Khz will be generated for only 2 seconds and not 5 seconds. Freq('p',1000,5000,50) Wait(2000) Freq('p',0,0,0)"
  },
  "software/due-script/corelib/i2c.html": {
    "href": "software/due-script/corelib/i2c.html",
    "title": "I2C",
    "keywords": "I2C I2cBytes(address, arrayWrite, writeCount, arrayRead, readCount) Reads and/or writes up to 4 bytes to/from I2C bus. Data is transfered from variables A, B, C, D. The return values (if any) are also stored in the same variables. address: I2C slave address arrayWrite: Array to send writeCount: The number of bytes to write arrayRead: Array to read readCount: The number of bytes to read # Write 1 byte, read 6 bytes dim a[1] a[0] = 1 dim b[6] i2cbytes(0x1c, a, 1, b, 6) Note Streams are not coded directly using DUE Script, see Streams I2cStream(address, writeCount, readCount) - address: address of the I2C device writeCount: readCount: Stream size: The stream starts with PC sending \"writeCount\" of bytes and then the PC must read the \"readCount\". If either count is zero then that step can be skipped. Note On SC13 devices only: The I2C pins are different on BrainPad Pulse vs FEZ boards. PB15 is used to determine how I2C should work. Pay attention to the state of PB15 on power up, Pulse has it pulled up through 10k resistor."
  },
  "software/due-script/corelib/infrared.html": {
    "href": "software/due-script/corelib/infrared.html",
    "title": "Infrared",
    "keywords": "Infrared IR decoder is fixed to pin 2 IrEnable(enable) - enables pin for IR signal capture enable: 1 = enable, 0 = disable IrRead() - reads the value from the IR enabled pin Return: Tracks the past 16 key presses and returns them. -1 if none. Button Return Value power 0 up 1 lightbulb 2 left arrow 4 sound 5 right arrow 6 backward 8 down 9 forward 2 + 12 0 13 - 14 1 16 2 17 3 18 4 19 5 20 6 21 7 22 8 23 9 24 IrEnable(1) @Loop x=IrRead() if x >=0: PrintLn(x):end Wait(1000) goto Loop"
  },
  "software/due-script/corelib/lcd.html": {
    "href": "software/due-script/corelib/lcd.html",
    "title": "LCD",
    "keywords": "LCD These functions allow for simple graphics on the very common I2C displays that use the SSD1306 controller and have 128x64 pixels. This display is found on the BrainPad Pulse by default, and can be added to the I2C channel on all of the other boards. These displays are available in multiple sizes but most common is 0.96\". Tip We have tested 2.42\" displays that use SSD1309 and seemed to work perfectly. Caution Displays with knock-off controller SSH1106 that is supposed to be compatible with SSD1306 did not work as expected. LcdConfig(output,address) Pipes the graphics to a connected display. By default, all graphics is directed to the display found on BrainPad Pulse. However, making a call to LcdConfig() directs the system to send all graphics to an external display, at the provided address. Setting the address to 0 resets the configuration to the default BrainPad Pulse LCD output: Output to display , 0 = none, 1 = console, 2 = LCD & console address: I2C address, 0 = default(BrainPad Pulse) Tip This function is not needed to use the display found on BrainPad Pulse. This example will pipe (direct) graphics to an external 2.42\" display with address 0x3C, wired to the 2.42\" SSD1309 display showing in the image above. Tip: A resistor on the back of the display needs to be moved to change its bus from SPI to I2C. LcdConfig(0, 0x3C) LcdClear(0) LcdText(\"Hello World\",1,10,10) LcdShow() LcdShow() Sends the display buffer to the LCD. LcdClear(color) Clears the entire screen to black or white color: 0 = black, 1 = white LcdClear(0) LcdShow() Draw Line LcdLine(color, x1,y1,x2,y2) color: 0 = black, 1 = white x1: Starting x point y1: Starting y point x2: Ending x point y2: Ending y point LcdClear(0) LcdLine(1,0,0,128,64) LcdShow() Set Pixel LcdPixel(color, x, y) color: 0 = black, 1 = white x: x pixel value y: y pixel value LcdClear(0) LcdPixel(1,64,32) LcdShow() Draw Circle LcdCircle(color, x,y,radius) color: 0 = black, 1 = white x: x position of circle's center y: y position of circle's center radius: radius of the circle LcdClear(0) LcdCircle(1,64,32,31) LcdShow() Draw Rectangle LcdRect(color, x, y, width, height) color: 0 = black, 1 = white x: Starting x point y: Starting y point width: Rectangle width height: Rectangle height LcdClear(0) LcdRect(1,10,10,118,54) LcdShow() Draw Filled Rectangle LcdFill(color, x, y, width, height) color: 0 = black, 1 = white x: Starting x point y: Starting y point width: Rectangle width height: Rectangle height LcdClear(0) LcdFill(1,10,10,118,54) LcdShow() Draw Text LcdText(\"text\", color, x, y) text: String message in double quotes. Str(): is used to convert variables to strings color: 0 = black, 1 = white x: x position y: x position LcdClear(0) LcdText(\"Hello World\",1,10,10) LcdShow() x=100 LcdClear(0) LcdText(str(x),1,0,0) LcdShow Draw Scaled Text Works exactly the same as LcdText() but adds scaling. LcdTextS(\"text\", color, x, y, scaleWidth, scaleHeight) text: String message in double quotes. Str(): is used to convert variables to strings color: 0 = black, 1 = white x: x position y: x position scaleWidth: Width scale multiplier scaleHeight: Height scale multiplier LcdClear(0) LcdTextS(\"Hello\",1,0,0,2,2) LcdShow() Wait(1000) x=100 LcdClear(0) LcdTextS(Str(x),1,0,0,2,2) LcdShow() Tip Scale is multiplier for the pixel in width and height to make the font larger () Draw Image LcdImg(array,x, y, transform) array: Image array (see below). x: x position on screen. y: y position on screen. transform: transform modifier. There are cases where images need to be added to the screen. Of course, we are taking about basic simple images, more like a tiny sprite in a game. The image is an array of pixels. This arrays must start with 2 elements that contain the image's width and height. We will place the array on multi line to help us visualize what the image might look like, but placing everything on a single line has the same effect Image Array formatting: Dim a[2+(8*8)] = [8,8, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1] The following example displays the image array on the screen. Dim a[2+(8*8)] = [8,8, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1] LcdClear(0) LcdImgS(a,60,30,2,2,0) LcdShow() Transformation modifiers: Value Transformation 0 No transform 1 Flip image horizontally 2 Flip image vertically 3 Rotate image 90 degrees 4 Rotate image 180 degrees 5 Rotate the image 270 degrees(same as -90 degrees) Draw Scaled Image Works the same as LcdImg but adds scaling. LcdImgS(array,x, y, transform,scaleWidth,scaleHeight) array: Image array (see below). x: x position on screen. y: y position on screen. transform: transform modifier. (see above) scaleWidth: Width scale multiplier scaleHeight: Height scale multiplier LCD Stream Stream is used to send the entire LCD update. Note Streams are not coded directly using DUE Script, see Streams LcdStream() Stream Size: The size screen size divided by 8, 128x64/8=1K. The data is organized as 8bit columns going left to right and then wrapping around to the next row. Example code to set a pixel at 10x10 int x=10; int y=10; buffer[(y >> 3) * 128 + x] |= (byte)(1 << (y & 7)); Note LCD Stream automatically calls LcdShow() internally."
  },
  "software/due-script/corelib/led.html": {
    "href": "software/due-script/corelib/led.html",
    "title": "LED",
    "keywords": "LED This function is used to take control of the on-board LED. LED() is non-blocking so it can be used as a status indicator for your programs while they run. LED(high, low, count) high: The duration in milliseconds the LED is on. low: The duration in milliseconds the LED is off. count: The number of times the LED will blink, Tip Setting count to -1 will blink the LED forever, and 0 will turn off the LED. LED(1000,1000,10) Note All DUE enabled hardware's on-board LED can also be accessed directly using the DWrite() function using pin 'L' or 'l', which are ASCII 108. DWrite('L',1)"
  },
  "software/due-script/corelib/neopixel.html": {
    "href": "software/due-script/corelib/neopixel.html",
    "title": "NeoPixel",
    "keywords": "NeoPixel NeoClear() - Clears all LEDs (in memory). Needs NeoShow() to see the affect NeoSet(index, red, green, blue) - Sets a specific LED to a color. Needs NeoShow() to see affect index: The LED index where 0 is first one and supporting up to 256 LEDs red, green, blue: Color levels, 0 to 255 NeoShow(pin, count) - All NeoPixel code is held internally until show is called pin: Pin connected to NeoPixel count: The count of LEDs to update and show This example assumes we have 8 LEDs and will set 8 LEDs to red one at a time. Then it waits one second before it sets the first LED to a bluish hue! NeoClear() For x = 0 to 8 NeoSet(x,10,0,0) NeoShow(0,8) Wait(100) Next Wait(1000) NeoSet(0,0,10,20) NeoShow(0,8) NeoStream(pin,count) - Streams data directly to LEDs. Automatically calls NeoShow() internally pin: Pin connected to NeoPixel count: The count of LEDs to stream Stream size: It is \"count\" multiplied by 3, DUE to the fact that each LED needs 3 bytes for colors, ordered in GRB format."
  },
  "software/due-script/corelib/servo.html": {
    "href": "software/due-script/corelib/servo.html",
    "title": "Servo Motor",
    "keywords": "Servo Motor ServoSet(pin, degree) - Sets servo motor connected to pin to a specific position pin: pin number degree: 0 to 180 Tip Many servo motors need 5V to work. @Loop ServoSet(0,0) Wait(1000) ServoSet(0,180) Wait(1000) Goto Loop"
  },
  "software/due-script/corelib/spi.html": {
    "href": "software/due-script/corelib/spi.html",
    "title": "SPI",
    "keywords": "SPI SpiByte(byte) - sends a byte byte: - value 0 to 255 Return: Read byte value SpiCfg(mode,frequency) mode: - 0 to 3 frequency: - 200 to 20000 (200KHz to 20MHz) # Send 0x55 and read the returned byte into x x = SpiByte(0x55) Note Streams are not coded directly using DUE Script, see Streams SpiStream(writeCount, readCount, cs) - Streams data directly to the SPI device writeCount: The number of bytes to write readCount: The number of bytes to read cs: set to -1 if not needed Stream size: The stream starts with PC sending \"writeCount\" of bytes and then the PC must read the \"readCount\". If either count is zero then that step can be skipped. Spi4Bpp(count) - Streams and converts data from 4BPP to 16BPP count: The count of bytes to be written. Stream size: The \"count\". This special function converts 4BPP incoming data to 16BPP on-the-fly. This is added to speed up the use of SPI color displays, namely ones using ST7735 found on the very common 1.8\" SPI color displays. This allows for faster updates, since each byte sent is 2 pixels. Palette(index, colorValue) - Sets the desired color for a palette. index: Index number of color colorValue: A standard HEX value of the RGB color. This function goes hand-in-hand with Spi4Bpp() function to set the colors that are to be used. Default colors: Index Color Value Color 0 0x000000 Black 1 0xFFFFFF White 2 0xFF0000 Red 3 0x32CD32 Lime 4 0x0000FF Blue 5 0xFFFF00 Yellow 6 0x00FFFF Cyan 7 0xFF00FF Magenta 8 0xC0C0C0 Silver 9 0x808080 Gray 10 0x800000 Maroon 11 0xBAB86C Olive 12 0x00FF00 Green 13 0xA020F0 Purple 14 0x008080 Teal 15 0x000080 Navy"
  },
  "software/due-script/corelib/systemfunctions.html": {
    "href": "software/due-script/corelib/systemfunctions.html",
    "title": "System Functions",
    "keywords": "System Functions Cos(number) - Returns the cosine of the argument Echo(enable) enable: 0 = Enable echo , 1 = Disable echo GetCh() - reads character input, in ASCII format. Return -1 when no character detected GetNum() - reads number input, can be used with IsNAN() to determine if value is a number Print(text) - Prints the value of the argument to the console on the same line text: String or variable PrintLn(text) - Prints the value of the argument to the console then moves to the next line text: String or variable Reset(loader) - Resets the board loader: 0 = system reset, 1 = reset and stay in loader mode Rnd(max) - Generates random number max: maximum value of random number Returns: returns random number between 0 and value of argument max Sin(number) - Returns the sine value of the argument Sqrt(number) - Returns the square root of the argument Str(number) - Returns a string from a variable, this is used for functions that require a string. Fmt(....) - Takes multiple comma separated arguments that can be either variables or strings. Returns: A combined string Tan(number) - Returns the tangent of the argument TickMs() - Read system ticks in milliseconds TickUs() - Read system ticks microseconds Trunc(number) - Returns the truncated value of the argument Version - Returns the current firmware version of DUE The last character returned in Version is board Board Character Pulse P Edge E Flea F Pico I Wait(duration) - Holds program from running duration: Duration in milliseconds"
  },
  "software/due-script/corelib/temp-humidity.html": {
    "href": "software/due-script/corelib/temp-humidity.html",
    "title": "Temperature and Humidity",
    "keywords": "Temperature and Humidity Works with the DHT line of low-cost temperature & humidity sensors. Temp(pin, type) - Reads sensor temperature data on connected pin pin: pin number type: DHT11 = 11, DHT12 = 12, DHT22 = 22, DHT21 = 21 Returns: Temperature in Celsius. Humidity(pin, type) - Reads sensor humidity data on connected pin pin: pin number type: DHT11 = 11, DHT12 = 12, DHT22 = 22, DHT21 = 21 Returns: Humidity level 0 to 100. This example reads temperature and humidity, and converts Celsius to Fahrenheit and displays @Loop c = Temp(0,11) h = Humidity(0,11) #Convert Celsius to Fahrenheit f = (c*1.8)+32 PrintLn(\"Current Temperature Celsius = \", c) PrintLn(\"Current Temperature Fahrenheit = \", f) PrintLn(\"Current Humidity is = \", h) Wait(200) Goto Loop"
  },
  "software/due-script/corelib/touch.html": {
    "href": "software/due-script/corelib/touch.html",
    "title": "Touch",
    "keywords": "Touch This feature allows sensing of a finger or human touch to a pin. This requires an external 100pf capacitor between the pin and GND. The caps are already found on BrainPad boards pads 0, 1, and 2. TouchRead(pin) - Initializes the pin for touch pin: pin number Returns: 0 = not touch or 1 = touched @Loop a=TouchRead(0):b=TouchRead(1):c=TouchRead(2) If a>0:PrintLn(\"pin 0\"):End If b>0:PrintLn(\"pin 1\"):End If c>0:PrintLn(\"pin 2\"):End Wait(100) Goto Loop"
  },
  "software/due-script/corelib/uart.html": {
    "href": "software/due-script/corelib/uart.html",
    "title": "UART",
    "keywords": "UART UartInit(baudRate) - Sets the baud rate UART baudRate: Any commonly used standard baud rate UartRead() - Read UART data Returns: A byte read from UART UartWrite(data) - Write UART data data: Data byte to send on UART UartCount() - Count Returns: How many bytes have been buffered and ready to be read"
  },
  "software/due-script/due-script.html": {
    "href": "software/due-script/due-script.html",
    "title": "DUE Script",
    "keywords": "DUE Script The DUE Link platform includes a scripting language called DUE Script it runs internally on any DUE-enabled hardware. This allows the device to run standalone, independent from any host. This very easy-to-learn scripting language is inspired by BASIC and Python, giving the user the simplicity and flexibility they need. The on-line DUE Console lets developers start experimenting with DUE Script and the physical world in minutes...no installation is necessary! Operating Modes DUE Script has two modes Immediate mode and Record mode. Immediate mode commands are executed immediately. Immediate mode commands are a single line of code. Record mode commands are stored in flash and then can be executed. The DUE Console handles these modes automatically. The following details are only needed when not using DUE Console, like when using a terminal software like TeraTerm. Immediate Mode The > command is used to switch the system to immediate mode. This in turn will change the prompt to > as well. All statements are executed as soon as entered. > Print(\"Hello World\") Note Immediate Mode is the default mode when device is first connected. Record Mode The Record mode, is entered using the $ command. This will also modify the prompt to $. All statements entered are stored internally and not executed. The run command can be used to execute the program. The device will also automatically run a program on power up. Statement Description $ Sets the device in record mode > Exits record mode and returns to direct mode The following statements control the program recorded in flash, but can be used in both Immediate or Record modes. When used in Record mode these special statements execute, but are not added to the program in flash. Statement Description Run Executes the program stored in flash New Erases the program stored in flash List Returns all the code in your program Tip A running program can be terminated by hitting the ESC key, DEL Key, or Backspace Key. > $ $ PrintLn (x) $ PrintLn (y) $ > > x=1:y=2 > Run 1 2 >List PrintLn(x) PrintLn(y) >new Note The DUE Console hides the prompts and automatically switches to the appropriate mode. Script Features DUE Scripts are not case sensitive. Its syntax is very simple and inspired by BASIC coding language. The power of DUE Scripts comes from its simplicity rather than from its feature set. This is a perfect language to teach someone coding. Users that require serious coding should be using the DUE Platform combined with one of the many available coding languages. Still, DUE Scripts can be used to extend those languages, as detailed below. Print Print() is a function that returns the value of its arguments. These arguments can be variables, strings, or equations. Print() is also unique because it can handle multiple arguments. x=100 Print(x) Print(\"Hello World\") Print(x+x) Print(x,\"Hello World\", x+x) Result: 100Hello World200100Hello World 200 PrintLn() adds a line break to each print statement. x=100 PrintLn(x) PrintLn(\"Hello World\") PrintLn(x+x) PrintLn(x,\"Hello World\", x+x) Result: 100 Hello World 200 100Hello World200 Comments The # character is used to identify a comment. Comments are ignored by the program, text added to help developers understand the code. # This is a comment x=10 Print(x) # This is also a comment Variables DUE Script has a fixed set of 26 variables, one for each letter, assigned to a to z. The only data type used in DUE is float. All variables created are global in nature. To use a variable, simply use x=5.5 Operands DUE Script supports the following operators. Mathematical + Add - Subtract * Multiply / Divide % Modulus, the remainder Comparators > Greater Than < Less Than >= Greater Than or Equal To <= Less Than or Equal To = Equal != Not Equal Logical && And || Or Bitwise & Bitwise And | Bitwise Or << Shift Right >> Shift Left Arrays Similarly to variables, arrays are fixed to 26 arrays. They are assigned to letters a to z. DUE Script differentiates between variable a and array a[] when square brackets are used. Arrays are size zero by default and can be sized, or resized using Dim. This is an example that uses both, variables and arrays: Dim a[10] For i=0 to 9:a[i]=i*2:Next For i=0 to 9:PrintLn(a[i]):Next The output will look like: 0 2 4 6 8 10 12 14 16 18 Tip Use Dim a[0] to free up the memory reserved for array a[]. Arrays can be initialized in two different ways. Declare an array and initialize it with values at the same time. Note Range(Len(array)) returns the length of the array. Dim x[6] = [1,2, 3,4, 5,6] For i in Range(Len(x)) PrintLn(x[i]) Next The second way is to create the array first, then populate it later. Dim x[6] x = [7,8, 9,10, 11,12] For i in Range(Len(x)) PrintLn(x[i]) Next There are some specific things we must know about initializing arrays NOTE: Multi-line initializers must have a comma ending the line if the following line will have more data for the initializer (see the examples above) Multi-line initializers can only be used in \"record\" mode. In immediate mode, the initializer must be on a single line. Initializers are always run, so if the initializer is inside a loop every time the dim or assignment initializer is encountered it will reinitialize the data in the array You can have fewer values in the initializer than what the array holds, but you cannot have more. You will get an error indicating that a ] was expected if there are too many elements in the initializer Since we do not want to do too many dynamic allocations, the size of the array must be specified when using dim even when initializing the array For-Loop The For-Loop has two different syntax styles. BASIC and Python style. BASIC Style The BASIC style For-Loop includes the last number in the range. # Counting Up For i=1 to 5 Print(i,\",\") Next Output: 0,1,2,3,4,5, # Counting Up in increments of 10 For i=1000 to 1 Step 10 PrintLn(i) Next # Counting Down in increments of 10 For i=1000 to 1 Step -10 PrintLn(i) Next Python Style DUE Script also allows For Loops written similar to Python. The last number of the range is not included in output. # Range with only stop value For i in range(5) Print(i,\",\") next Output: 0,1,2,3,4, # Range with start and stop value For i in range(1,5) Print(i,\",\") next # Range with start, stop, and step value For i in range(1,5,2) Print(i,\",\") next # Range with start, stop, and negative step value For i in range(10,1,-2) Print(i,\",\") next If-Statement If-Statements must end with the End command. This will only end the If-Statement and not your program. If x=1 PrintLn(\"one\") Else PrintLn(\"not one\") End If-Statements can also be nested within each other. Each If-Statement requires an End command to terminate its own process. If x=1 PrintLn(\"one\") Else If x =2 PrintLn(\"two\") Else PrintLn(\"not one or two\") End End Labels Labels are needed to redirect the program. They are used by Goto when calling a subroutine. A Label is created by using the @ symbol in front of the desired label. Labels are limited to 6 characters. Goto Goto is useful for repeating tasks indefinitely by sending to a specific Label name. @Loop # add code here that runs forever Goto Loop Exit & Return Exit terminates the program. Print(\"Hello\") Exit Print(\"This will not get printed\") Return send the execution back from a called subroutine, see Subroutines below. Subroutine Developers can use Labels to create their own subroutines to implement \"soft\" like functions in their code. These subroutines are similar to functions but do not take variables or return values. Tip The built-in API offers true functions and therefore do take arguments and return values. User subroutines are always added in recoding mode and resides in nonvolatile memory. A user subroutine starts with a label and ends with a Return. @Mine # add code here Return The subroutine can then be called by its name followed by (). Mine() Note how a subroutine can be called externally from Immediate Mode. This allows for extending DUE Scripts with new commands that can then later be called from Immediate Mode and in turn be called from a high level language, like Python, when connected to a Host. Tip DUE variables are global and any changes inside subroutines will affect variable values outside those subroutines. Combining Commands Multiple commands can be combined on a single line. This is especially useful when using Immediate mode where a single line is required. To use multiple command, a : symbol is used. This is an example of a for loop in a single line For i=1 to 1000 Step 10:PrintLn(i):Next Good Practices Recorded DUE Scripts are executed immediately on power up (the run command is issued internally). If the user doesn't want any of the code to run, they can start the program with an Exit statement. And then the 'Exit' can be flowed by a label, for example '@Go'. This code can be saved to the device using Record Mode: Exit @Go Print(\"Only when Go!\") The program will not execute on power up due to the Exit command. But now calling Go() in immediate mode will produce \"Only when Go!\". Another good practice is to use the on-board LED as an activity LED to show that the device is running. Simply start your program by adding Led(200,200,-1)."
  },
  "software/due-script/samples/basic.html": {
    "href": "software/due-script/samples/basic.html",
    "title": "Basic Samples",
    "keywords": "Basic Samples These samples don't require you to wire anything and utilize the on-board components, when available, of the supported hardware. Example: LED, Buttons, Buzzer, and Screen. Blink On-board LED @Loop DWrite('L',1) : Wait(250) DWrite('L',0) : Wait(250) Goto Loop Analog Blink On-board LED @Loop For i=0 to 100 Step 10 AWrite('L', i) : Wait(50) Next For i=100 to 0 Step -10 AWrite('L', i) : wait(50) Next Goto Loop On-board Buttons BtnEnable('a',1) BtnEnable('b',1) @Loop x=BtnDown('a') y=BtnDown('b') If x=1 PrintLn(\"Button A\") Wait(500) End If y=1 PrintLn(\"Button B\") Wait(500) End Goto Loop On-board Buzzer # G Sound(392, 1000, 100) Wait(500) # A Sound(440, 1000, 100) Wait(500) # F Sound(349, 500, 100) Wait(500) # F octave lower Sound(175, 500, 100) Wait(500) # C Sound(262, 2000, 100) On-board Display Small Text LcdClear(0) LcdText(\"Hello World\",1,10,10) LcdShow() On-board Display Large Text LcdClear(0) LcdTextS(\"Hello\",1,0,0,2,2) LcdTextS(\"World\",1,15,15,2,2) LcdShow()"
  },
  "software/due-script/samples/falling-bird.html": {
    "href": "software/due-script/samples/falling-bird.html",
    "title": "Falling Bird Game",
    "keywords": "Falling Bird Game In this example we create 2 different versions of the same game one using a NeoPixel Matrix, and other using the BrainPad Pulse and its on-board screen. NeoPixel Falling Bird This sample creates a simple falling bird type game using a NeoPixel matrix. The object is for the player to move to avoid random obstacles. Hardware: Any device supporting DUE-Script. In this case we're using the BrainPad Pulse with its built-in A button. NeoPixel 16x16 Matrix with zig-zag matrix configuration w=16 # Width of the matrix u=4 # Player X position v=8 # Player Y position t=0 # Player tail Y offset b=15 # Wall X position h=4 # Wall height g=6 # Wall gap BtnEnable('a', 1) # Game loop @loop NeoClear() plyr() wall() coll() NeoShow(256) wait(50) goto loop # Handle the player @plyr if BtnDown('a') if v>0:v=v-1:end t=1 else if v<15:v=v+0.5:end t=-1 end x=u y=trunc(v) pxl() NeoSet(p, 64,0,64) x=x-1 y=y+t pxl() NeoSet(p, 64,0,64) return # Update wall @wall b=b-0.25 if b<=0 b=15 g=4+rnd(2) h=2+rnd(6) end for i=0 to 1 x=trunc(b)+i for y=0 to h pxl() NeoSet(p, 0,64,0) next for y=h+g to 15 pxl() NeoSet(p, 0,64,0) next next return # Check collision @coll i=trunc(b) if i != u && i != u-1 :return:end if v<=h:goto die:end if v>=h+g:goto die:end return # Player died @die for i=0 to 20 x=(u-2)+rnd(4) y=(v-2)+rnd(4) pxl() NeoSet(p, rnd(64),0,0) NeoShow(256) next b=15 return # Formula for index into 16x16 NeoPixel Matrix # p=pxl(x,y) @pxl p = x*w+(x&1)*(w-1)+(1-2*(x&1))*y return Pulse Falling Bird This sample creates a falling bird game just like the NeoPixel version NeoPixel version of the game. The object is for the player to move to avoid random obstacles. Hardware: Brainpad Pulse u=4 # Player X position v=8 # Player Y position t=0 # Player tail Y offset b=31 # Wall X position h=4 # Wall height g=6 # Wall gap BtnEnable('a', 1) # Game loop @loop LcdClear(0) plyr() wall() coll() LcdShow() goto loop # Handle the player @plyr if BtnDown('a') if v>0:v=v-1:end t=1 else if v<15:v=v+0.5:end t=-1 end x=u y=trunc(v) pxl() x=x-1 y=y+t pxl() return # Update wall @wall b=b-0.5 if b<=0 b=31 g=4+rnd(2) h=2+rnd(6) end x=trunc(b) for y=0 to h pxl() next for y=h+g to 15 pxl() next return # Check collision @coll i=trunc(b) if i != u:return:end if v<=h:goto die:end if v>=h+g:goto die:end return # Player died @die for i=0 to 20 x=(u-2)+rnd(4) y=(v-2)+rnd(4) pxl() LcdShow() next b=31 return # Plot large pixel # p=pxl(x,y) @pxl #for i=0 to 2: for j=0 to 3:LcdPixel(1, x*4+j, y*3+i):next:next LcdPixel(1, x*4, y*3) LcdPixel(1, x*4+1, y*3) LcdPixel(1, x*4+2, y*3) LcdPixel(1, x*4+3, y*3) LcdPixel(1, x*4, y*3+1) LcdPixel(1, x*4+1, y*3+1) LcdPixel(1, x*4+2, y*3+1) LcdPixel(1, x*4+3, y*3+1) LcdPixel(1, x*4, y*3+2) LcdPixel(1, x*4+1, y*3+2) LcdPixel(1, x*4+2, y*3+2) LcdPixel(1, x*4+3, y*3+2) return"
  },
  "software/due-script/samples/neopixel-matrix.html": {
    "href": "software/due-script/samples/neopixel-matrix.html",
    "title": "NeoPixel 16x16 Matrix",
    "keywords": "NeoPixel 16x16 Matrix These samples uses NeoPixel. NeoPixel is an addressable LED that actually contains 3 LEDs, RED, GREEN, and BLUE. These three LEDs combine to make just about any color. NeoPixel come in many different configurations, from 1 single NeoPixel to panels containing many. DUE allows for up to 256 NeoPixel. This is perfect for a 16x16 setup. Hardware: Any device supporting DUE-Script NeoPixel 16x16 Matrix with zig-zag matrix configuration Set-up: Connecting the panel is easy, we just need to connect three wires POWER, GND, and DATA to control all the LEDs. On the back of most NEOPixel panels are 3 sets of cables connected to the panel. OUT: connector is used to connect panels together. POWER: is used to connect 5V external power source to the panel. This is often necessary when using many LEDs. IN: connector is where we connect our hardware to the NeoPixel. We connect PIN 1 DUE enabled hardware to the wire labeled DIN, in this case the wire is the green wire. Add a picture frame: We took 2 5x7\" picture frames and connected the longer ends together to make a picture frame to hold our NeoPixel. We even used the back of the picture frames as a built-in stand. Sine wave This sample shows a sine wave scrolling along the matrix # NeoPixel - Moving sine wave h=16:w=16 z=3.1415926/6 i=0 @loop NeoClear() for x=0 to 15 y = 8+sin((x+i)*z)*6 pxl() NeoSet(p,0,128,0) next NeoShow(256) i=i+1 goto loop # Formula for index into 16x16 NeoPixel Matrix # p=pxl(x,y) @pxl p = x*w+(x&1)*(w-1)+(1-2*(x&1))*y return Colorful sine wave This sample shows a colorful sine wave scrolling along the matrix # NeoPixel - Colorful Moving sine wave h=16:w=16 i=0 z=3.1415926/6 @loop NeoClear() for x=0 to 15 d = x+i y = 8+sin(d*z)*6 pxl() NeoSet(p,128,0,0) y = 8+sin((d+1)*z)*6 pxl() NeoSet(p,0,128,0) y = 8+sin((d+2)*z)*6 pxl() NeoSet(p,0,0,128) next NeoShow(256) i=i+1 goto loop # Formula for index into 16x16 NeoPixel Matrix # p=pxl(x,y) @pxl p = x*w+(x&1)*(w-1)+(1-2*(x&1))*y return Rainbow This sample shows a colorful rainbow # NeoPixel - Rainbow h=16:w=16 z=3.1415926/15 NeoClear() for x=0 to 15 for i=4 to 8 y = i+sin(x*z)*6 pxl() if i%5=0:NeoSet(p,0,0,128):end if i%5=1:NeoSet(p,0,128,0):end if i%5=2:NeoSet(p,0,128,128):end if i%5=3:NeoSet(p,128,0,0):end if i%5=4:NeoSet(p,128,0,128):end next next neoshow(256) exit # Formula for index into 16x16 NeoPixel Matrix # p=pxl(x,y) @pxl p = x*w+(x&1)*(w-1)+(1-2*(x&1))*y return"
  },
  "software/due-script/samples/pulse-analogclock.html": {
    "href": "software/due-script/samples/pulse-analogclock.html",
    "title": "Pulse Analog Clock",
    "keywords": "Pulse Analog Clock This advanced sample turns your Brainpad Pulse into an analog clock Hardware: Brainpad Pulse BrainPower (Optional) This example demonstrates advanced features of the DUE-Script language. Using arrays to store X,Y coordinates Using variable as both arrays and numbers (very advanced feature to save variables) # Pulse - LCD Clock # Arrays to store the X and Y coordinates of each hand of the clock # Index 0 - X # Index 1 - Y dim h[2] dim m[2] dim s[2] # Numeric variables storing the current value for each of the hands h=5 m=0 s=0 p=3.1415926 @loop LCDClear(0) face() time() LCDShow() Wait(1000) goto loop # Draw the clock face @face # Draw the small dot on the clock face for i=0 to 59 m[0]=25*cos(i*p/30):m[1]=25*sin(i*p/30) LCDPixel(1,64+m[0],32+m[1]) next # Draw the large dots for every hour for i=0 to 11 m[0]=25*cos(i*p/6):m[1]=25*sin(i*p/6) LCDCircle(1,64+m[0],32+m[1],2) next return # Calculate and draw the new hand positions @time h[0]=16*cos(h*p/6):h[1]=16*sin(h*p/6) m[0]=20*cos(m*p/30):m[1]=20*sin(m*p/30) s[0]=25*cos(s*p/30):s[1]=25*sin(s*p/30) if s=60:s=0:m=m+1:end if m=60:m=0:h=h+1:end if h=12:h=0:end s=s+1 LCDLine(1,64,32,64+h[0],32+h[1]) LCDLine(1,64,32,64+m[0],32+m[1]) LCDLine(1,64,32,64+s[0],32+s[1]) return"
  },
  "software/due-script/samples/pulse-bouncingball.html": {
    "href": "software/due-script/samples/pulse-bouncingball.html",
    "title": "Pulse Bouncing Ball",
    "keywords": "Pulse Bouncing Ball This sample bounces a ball of the 4 edges of the screen Hardware: Brainpad Pulse # Pulse - LCD Bouncing ball x=64 # Ball X location y=32 # Ball Y location r=5 # Ball radius a=3 # Ball X Speed b=2 # Ball Y Speed @loop LCDClear(0) # Clear the screen LCDCircle(1,x,y,r) # Draw the ball LCDShow() # Update the screen x=x+a:y=y+b # Move the ball # Check if the ball hit one of the edges # if it did then reverse the direction and make a sound if x<r || x>=(128-r):a=-a:sound(100,16,100):end if y<r || y>=(64-r):b=-b:sound(100,16,100):end goto loop"
  },
  "software/due-script/samples/pulse-falling-bird.html": {
    "href": "software/due-script/samples/pulse-falling-bird.html",
    "title": "Pulse Flappy Birds",
    "keywords": "Pulse Flappy Birds This sample creates a falling bird game just like the NeoPixel version NeoPixel version of the game. The object is for the player to move to avoid random obstacles. Hardware: Brainpad Pulse u=4 # Player X position v=8 # Player Y position t=0 # Player tail Y offset b=31 # Wall X position h=4 # Wall height g=6 # Wall gap BtnEnable('a', 1) # Game loop @loop LcdClear(0) plyr() wall() coll() LcdShow() goto loop # Handle the player @plyr if BtnDown('a') if v>0:v=v-1:end t=1 else if v<15:v=v+0.5:end t=-1 end x=u y=trunc(v) pxl() x=x-1 y=y+t pxl() return # Update wall @wall b=b-0.5 if b<=0 b=31 g=4+rnd(2) h=2+rnd(6) end x=trunc(b) for y=0 to h pxl() next for y=h+g to 15 pxl() next return # Check collision @coll i=trunc(b) if i != u:return:end if v<=h:goto die:end if v>=h+g:goto die:end return # Player died @die for i=0 to 20 x=(u-2)+rnd(4) y=(v-2)+rnd(4) pxl() LcdShow() next b=31 return # Plot large pixel # p=pxl(x,y) @pxl for k=0 to 2:for j=0 to 3:LcdPixel(1, x*4+j, y*3+k):next:next return"
  },
  "software/due-script/samples/pulse-gamer-pong.html": {
    "href": "software/due-script/samples/pulse-gamer-pong.html",
    "title": "BrainGamer - Sketch",
    "keywords": "BrainGamer - Sketch Pair your Pulse with the Brain Gamer to create the first game ever Pong! Hardware: Brainpad Pulse BrainGamer #BrainGamer Pong @Start a = 30 #Left Player Position b = 30 #Right Player Position g = 10 #Ball x h = 2.3 #Ball x direction i = 10 #Ball y j = 2.6 #Ball y direction s = 0 #Player1 Score t = 0 #Player2 Score w = 0 #Check Win @Loop LcdClear(0) g = g + h #Move Ball X i = i + j #Move Ball Y if i < 5 || i> 55: #Bounce off top or bottom walls j = j* -1 End LcdFill(1, g, i, 4, 4) #Draw Ball if g > 118: if i >= (b - 1) && i <= (b + 12) #Add code here when player hits ball h = h* -1 Sound(256,100,50) else #Add code here when player misses s = s + 1 g = 15 Von()#Vibrate BrainGamer Wait(100) Voff()#Turn off Vibrate End End if g < 12: if i >= (a - 1) && i <= (a + 12) #Add code here when player hits ball h = h* -1 Sound(256,100,50) else #Add code here when player misses t=t+1 g=115 Von()#Vibrate BrainGamer Wait(100) Voff()#Turn off Vibrate End End Rocker() #Check Rocker Move if y < 40:a = a - 4:End #Move Left Paddle Up if y > 60:a = a + 4:End #Move Left Paddle Down if a < 5:a = 5:End #Left Paddle Hits Top if a > 50:a = 50:End #Left Paddle Hits Bottom LcdFill(1, 10, a, 2, 10) #Draw Left Paddle Keys() #Check Key Press if u = 0:b = b - 4:End #Move Right Paddle Up if d = 0:b = b + 4:End #Move Right Paddle Down if b < 5:b = 5:End #Right Paddle Hits Top if b > 50:b = 50:End #Right Paddle Hits Bottom LcdFill(1,120,b,2,10) #Draw Right Paddle For n = 0 to 64 step 10 #Draw Net LcdLine(1,64,n,64,n+5) Next if s = 5 LcdClear(0) LcdTextS(\"Player 1\",1,5,0,2,2) LcdTextS(\"WINS!\",1,25,20,2,2) LcdShow() w=1 Wait(3000) End if t = 5 LcdClear(0) LcdTextS(\"Player 2\",1,5,0,2,2) LcdTextS(\"WINS!\",1,25,20,2,2) LcdShow() w=1 Wait(3000) End if w = 1 #If winner play sound and restart Sound(256,1000,50) Sound(200,1000,50) Sound(256,1000,50) Wait(1500) Goto Start() End LcdText(str(s),1, 50, 5); LcdText(str(t),1, 74, 5); LcdShow() Wait(10) Goto Loop Exit ##################################### ### BrainGamer Driver ### ##################################### ### variables used by driver ### ### x,y,u,d,l,r ### ##################################### ### Rocker ### # Reads the rocker position into x and y @Rocker x = ARead(4) y = ARead(3) Return ### Activate Vibrator ### @Von DWrite(8,0) Return ### Deactivate Vibrator ### @Voff DWrite(8,1) Return ### Read Keypad #### # Reads the 4 buttons into U,D,L,R @Keys u = DRead(14,1) d = DRead(15,1) l = DRead(13,1) r = DRead(16,1) Return return"
  },
  "software/due-script/samples/pulse-gamer-sketch.html": {
    "href": "software/due-script/samples/pulse-gamer-sketch.html",
    "title": "BrainGamer - Pong",
    "keywords": "BrainGamer - Pong Pair your Pulse with the Brain Gamer to create one of the first video games ever made. Hardware: Brainpad Pulse BrainGamer This example demonstrates the use of both digital and analog inputs. Pin# Rocker X 4 Rocker Y 3 Up 14 Down 15 Left 13 Right 16 # BrainGamer - Sketch init() @loop # Gamer Btn-X - Clear the image if dread(13, 1)=0 init() end # Draw the pixel LCDPixel(1,x,y) LCDShow() # Read the joystick u=aread(4) # Joystick-X v=aread(3) # Joystick-Y # Move the pen based on the joystick position if u<45:x=x+1:end if u>55:x=x-1:end if v<45:y=y-1:end if v>55:y=y+1:end # Wrap around the screen edges if x>127:x=0:end if x<0:x=127:end if y>63:y=0:end if y<0:y=63:end goto loop # Initialize the scetcher @init x=64 y=32 LCDClear(0) return"
  },
  "software/due-script/samples/rotary-neopixel.html": {
    "href": "software/due-script/samples/rotary-neopixel.html",
    "title": "Grove Modules",
    "keywords": "Grove Modules Rotary Module This sample uses a Grove rotary module to control a NeoPixel Ring. This sample uses Analog & Neopixel. Hardware: FEZ Flea Grove XIAO Shield Grove Rotary Angle Sensor NeoPixel Ring Software: @loop NeoClear() NeoShow(24) a=ARead(6) NeoSet(a/4,255,0,0) NeoShow(24) Wait(50) goto loop"
  },
  "software/due-script/samples/samples.html": {
    "href": "software/due-script/samples/samples.html",
    "title": "Samples",
    "keywords": "Samples The DUE Console includes many samples that work without any additional hardware. This section includes sample projects that may require additional hardware. More code samples are found on the Samples GitHub Repo Sample Use Basic Examples A few basic samples NeoPixel Matrix Several examples utilizing a 16x16 LED matrix NeoPixel Rotary Sample using Grove Rotary Module & NeoPixel Ring Falling Bird Game Falling Bird Game 16x16 LED matrix & BrainPad Pulse Pulse Analog Clock Analog Clock using the BrainPad Pulse Pulse Bouncing Ball Example that bounces ball on BrainPad Pulse screen BrainGamer Sketch Create your own art with BrainGamer and BrainPad Pulse BrainGamer Pong Create your own classic Pong with BrainGamer and BrainPad Pulse"
  },
  "software/due-script/streams.html": {
    "href": "software/due-script/streams.html",
    "title": "Streams",
    "keywords": "Streams DUE APIs are built to be ASCII human-friendly. This works great when using DUE Script. However, there are instances where speed or raw binary data is required. For example, when updating a display using I2C. This is where streams come in handy. Provided libraries, such as Python, use streams internally whenever possible. A stream command initiates the request, such as LcdStream(). Once this command is received and accepted by the device, the & symbol will be returned indicating readiness. The host can now send the entire data, exactly to the required byte count. See the individual stream command for details on what data count and structure to be sent. Streams in DUE Script Streams are not used when coding DUE Script directly. They are utilized by the provided libraries, when used in hosted mode."
  },
  "software/getting-started.html": {
    "href": "software/getting-started.html",
    "title": "Getting Started",
    "keywords": "Getting Started Hardware Selection The first step is to pick from one of the many available DUE Hardware options. Which includes the Maker friendly FEZ(Fast & Easy) Flea, FEZ Pico, and STEM educational BrainPad. Follow the instructions to load the latest firmware to get the hardware ready. Start Coding If you're just starting out with DUE Link the BrainPad hardware and its included lessons are great place to start. The lessons includes DUE Script lessons that take advantage of the web-based DUE Console it requires nothing to install. Connect your device and you are ready to start coding. The lessons also include other Coding Options. Some of the coding options include full open-source libraries for easier use. However, all coding options include demos to get you started. Check out the many provided open-source samples. Users with experience and a working setup can start with DUE Scripts utilizing its Core library."
  },
  "software/intro.html": {
    "href": "software/intro.html",
    "title": "DUE Link",
    "keywords": "DUE Link A DUE Link enabled device can give a computer, tablet or phone access to the physical world. Not only that, the DUE platform includes DUE Script for extending the device's features or even run independently from any additional hardware. Host Mode Though a standard USB connection, a DUE-enabled device can be connected to modern devices, such as phones, laptops, tablets, desktops and even smaller devices such as Raspberry Pi. The device will simply load, with no need to load any USB drivers. This is true on Windows, Mac, Linux, Android and even Chrome OS. Once effortlessly connected, developers can use the coding environment of choice to access a long list of available inputs and outputs. This includes, but not limited to, Analog, Digital, PWM, I2C, and SPI. Several coding languages are officially supported , with provided libraries and sample code; however, any other language can theoretically be supported using our open-source DUE libraries. See all of the Coding Options. DUE Scripts The DUE Link platform includes DUE Scripts allowing for further expandability. Additionally, these scripts allow the system to run independently from any host. Learn more about DUE Script."
  },
  "software/legal.html": {
    "href": "software/legal.html",
    "title": "Legal",
    "keywords": "Legal License This product with its accompanying firmware is licensed royalty-free for commercial and noncommercial use. Using the provided firmware on any non-official product requires additional licensing. The provided documentation/schematics/libraries/sources are not to be used in any manner outside of implementing and using this GHI Electronics product in your design. Disclaimer IN NO EVENT SHALL GHI ELECTRONICS, LLC BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS PRODUCT, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. GHI ELECTRONICS LINE OF PRODUCTS ARE NOT DESIGNED FOR LIFE SUPPORT APPLICATIONS. SPECIFICATIONS, PRICE AND AVAILABILITY ARE SUBJECT TO CHANGE WITHOUT ANY NOTICE. Security WE DO OUR BEST TO PROVIDE SECURE PRODUCTS THAT PROTECT YOUR INTELLECTUAL PROPERTY (CODE) AND ARE DIFFICULT TO EXPLOIT. HOWEVER, NO PRODUCT IS COMPLETELY SECURE. THERE ARE DISHONEST AND POSSIBLY ILLEGAL METHODS THAT CAN BE USED TO CIRCUMVENT OUR CODE PROTECTION AND SECURITY FEATURES. GHI ELECTRONICS, LLC SHALL IN NO EVENT BE HELD LIABLE IN ANY WAY FOR THE EXPLOITATION OF SECURITY VULNERABILITIES OR ANY USE OR MISUSE OF OUR PRODUCTS RESULTING IN THE LOSS OR THEFT OF CODE OR OTHER INTELLECTUAL PROPERTY. Product Longevity GHI ELECTRONICS, LLC IS PRIMARILY INVOLVED IN PROVIDING ELECTRONIC COMPONENTS, MODULES, AND ACCOMPANYING SOFTWARE THAT ARE USED BY OUR CUSTOMERS TO CREATE NEW AND INNOVATIVE PRODUCTS. IN SUPPORT OF OUR CUSTOMERS, WE DO OUR BEST TO DESIGN AND MANUFACTURE PRODUCTS WITH THE LONGEST LIFE CYCLE POSSIBLE. HOWEVER, OUR PRODUCT AVAILABILITY IS DEPENDENT UPON THE AVAILABILITY OF THE ELECTRONIC COMPONENTS FROM WHICH OUR PRODUCTS ARE BUILT. GHI ELECTRONICS, LLC WILL IN NO WAY BE HELD LIABLE FOR LOSSES OF ANY KIND, INCURRED BY OUR CUSTOMERS OR OTHERS, WHETHER MONETARY OR OTHERWISE, AS A RESULT OF GHI ELECTRONICS' PRODUCT SHORTAGES, DELAYS IN AVAILABILITY, OR DISCONTINUATION."
  }
}