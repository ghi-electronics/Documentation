### YamlMime:ManagedReference
items:
- uid: GHIElectronics.Endpoint.Devices.Display.DisplayController
  commentId: T:GHIElectronics.Endpoint.Devices.Display.DisplayController
  id: DisplayController
  parent: GHIElectronics.Endpoint.Devices.Display
  children:
  - GHIElectronics.Endpoint.Devices.Display.DisplayController.#ctor(GHIElectronics.Endpoint.Devices.Display.IDisplayProvider)
  - GHIElectronics.Endpoint.Devices.Display.DisplayController.Configuration
  - GHIElectronics.Endpoint.Devices.Display.DisplayController.Flush(System.Byte[])
  - GHIElectronics.Endpoint.Devices.Display.DisplayController.Flush(System.Byte[],System.Int32,System.Int32)
  - GHIElectronics.Endpoint.Devices.Display.DisplayController.Flush(System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32)
  langs:
  - csharp
  - vb
  name: DisplayController
  nameWithType: DisplayController
  fullName: GHIElectronics.Endpoint.Devices.Display.DisplayController
  type: Class
  source:
    remote:
      path: Dotnet/GHIElectronics.Endpoint.Libraries/GHIElectronics.Endpoint.Devices.Display/DisplayController.cs
      branch: main
      repo: https://github.com/ghi-electronics/Endpoint-Libraries.git
    id: DisplayController
    path: ../Endpoint-Libraries/Dotnet/GHIElectronics.Endpoint.Libraries/GHIElectronics.Endpoint.Devices.Display/DisplayController.cs
    startLine: 221
  assemblies:
  - GHIElectronics.Endpoint.Devices.Display
  namespace: GHIElectronics.Endpoint.Devices.Display
  example:
  - >-
    <pre><code class="lang-csharp">using System.Device.Gpio;

    using System.Device.Gpio.Drivers;

    using GHIElectronics.Endpoint.Pins;

    using GHIElectronics.Endpoint.Devices.Display;

    using SkiaSharp;

    using EndpointDisplayTest.Properties;


    var backlightPort = EPM815.Gpio.Pin.PD14 /16;

    var backlightPin = EPM815.Gpio.Pin.PD14 % 16;


    var gpioDriver = new LibGpiodDriver((int)backlightPort);

    var gpioController = new GpioController(PinNumberingScheme.Logical, gpioDriver);

    gpioController.OpenPin(backlightPin, PinMode.Output);

    gpioController.Write(backlightPin, PinValue.High); 

    var screenWidth = 480;

    var screenHeight = 272;


    SKBitmap bitmap = new SKBitmap(screenWidth, screenHeight, SKImageInfo.PlatformColorType, SKAlphaType.Premul);

    bitmap.Erase(SKColors.Transparent);


    var configuration = new FBDisplay.ParallelConfiguration(){
        Clock = 10000,
        Width = 480,
        Hsync_start = 480 + 2,
        Hsync_end = 480 + 2 + 41,
        Htotal = 480 + 2 + 41 + 2,
        Height = 272,
        Vsync_start = 272 + 2,
        Vsync_end = 272 + 2 + 10,
        Vtotal = 272 + 2 + 10 + 2,

    };

    var fbDisplay = new FBDisplay(configuration);

    var displayController = new DisplayController(fbDisplay);

    var imageWidth = 100;

    var imageHeight = 67;


    while (true){
        //Initialize Screen
        using (var screen = new SKCanvas(bitmap)){
            //Create Black Screen 
            screen.DrawColor(SKColors.Black);
            screen.Clear(SKColors.Black); //same thing but also erases anything else on the canvas first

            // Draw Logo from Resources
            var logo = Resources.logo;
            var info = new SKImageInfo(imageWidth, imageHeight);
            var sk_img = SKBitmap.Decode(logo, info);
            screen.DrawBitmap(sk_img, 0, 200);

            // Draw circle
            using (SKPaint circle = new SKPaint()){
                circle.Color = SKColors.Blue;
                circle.IsAntialias = true;
                circle.StrokeWidth = 15;
                circle.Style = SKPaintStyle.Stroke;
                screen.DrawCircle(410, 220, 30, circle); //arguments are x position, y position, radius, and paint
            }

            // Draw Oval
            using (SKPaint oval = new SKPaint()){
                oval.Style = SKPaintStyle.Stroke;
                oval.Color = SKColors.Blue;
                oval.StrokeWidth = 10;
                screen.DrawOval(300, 20, 60, 10, oval);
                oval.Style = SKPaintStyle.Fill;
                oval.Color = SKColors.SkyBlue;
                screen.DrawOval(300, 20, 60, 10, oval);
            }

            // Draw Line
            float[] intervals = [10, 20, 10, 20, 5, 40,];//sets the dash intervals
            using (SKPaint line = new SKPaint()){
                line.Color = SKColors.Red;
                line.IsAntialias = true;
                line.StrokeWidth = 20;
                line.Style = SKPaintStyle.Stroke;

                //Rounds the ends of the line
                line.StrokeCap = SKStrokeCap.Round;

                //Creates dashes in line based on intervals array
                line.PathEffect = SKPathEffect.CreateDash(intervals, 25);

                // Create linear gradient from upper-left to lower-right
                line.Shader = SKShader.CreateLinearGradient(
                new SKPoint(0, 0),
                new SKPoint(screenWidth, screenHeight),
                new SKColor[] { SKColors.Red, SKColors.Blue },
                new float[] { 0, 1 },
                SKShaderTileMode.Repeat);
                screen.DrawLine(0, 0, 400, 200, line);
            }

            //Using SkiaTypeface
            byte[] fontfile = Resources.OldeEnglish;
            Stream stream = new MemoryStream(fontfile);

            using (SKPaint textPaint = new SKPaint())
            using (SKTypeface tf = SKTypeface.FromStream(stream)){
                textPaint.Color = SKColors.White;
                textPaint.IsAntialias = true;
                textPaint.StrokeWidth = 2;
                textPaint.Style = SKPaintStyle.Stroke;

                //SKFont Text - 
                SKFont font = new SKFont();
                font.Size = 40;
                font.ScaleX = 2;
                font.Typeface = tf;
                SKTextBlob textBlob = SKTextBlob.Create("D", font);
                screen.DrawText(textBlob, 10, 150, textPaint);
            }

            // Draw Basic text
            using (SKPaint text = new SKPaint()){
                text.Color = SKColors.Yellow;
                text.IsAntialias = true;
                text.StrokeWidth = 2;
                text.Style = SKPaintStyle.Stroke;
                screen.DrawText("Hello World", 20, 20, text);
            }

            // Draw text
            using (SKPaint text = new SKPaint()){
                text.Color = SKColors.Yellow;
                text.IsAntialias = true;
                text.StrokeWidth = 2;
                text.Style = SKPaintStyle.Stroke;

                //SKFont Text - 
                SKFont font = new SKFont();
                font.Size = 22;
                font.ScaleX = 2;
                SKTextBlob textBlob = SKTextBlob.Create("I am Yellow", font);
                screen.DrawText(textBlob, 50, 100, text);
            }

            // Character Outlines
            using (SKPaint textPaint = new SKPaint()){
            // Set Style for the character outlines
            textPaint.Style = SKPaintStyle.Stroke;

            // Set TextSize 100x100
            textPaint.TextSize = Math.Min(100, 100);

            // Measure the text
            SKRect textBounds = new SKRect();
            textPaint.MeasureText("@", ref textBounds);

            // Coordinates to center text on screen
            float xText = screenWidth / 2 - textBounds.MidX;
            float yText = screenHeight / 2 - textBounds.MidY;

            // Get the path for the character outlines
            using (SKPath textPath = textPaint.GetTextPath("@", xText, yText)){
                // Create a new path for the outlines of the path
                using (SKPath outlinePath = new SKPath()){
                    // Convert the path to the outlines of the stroked path
                    textPaint.StrokeWidth = 1;
                    textPaint.GetFillPath(textPath, outlinePath);

                    // Stroke that new path
                    using (SKPaint outlinePaint = new SKPaint()){
                        outlinePaint.Style = SKPaintStyle.Stroke;
                        outlinePaint.StrokeWidth = 1;
                        outlinePaint.Color = SKColors.Red;
                        screen.DrawPath(outlinePath, outlinePaint);
                    }
                }
            }

            //Text along a path
            const string text = "SKIASHARP library ENDPOINT uses ";

            using (SKPath circularPath = new SKPath()){
                float radius = 0.35f * Math.Min(screenWidth, screenHeight);
                circularPath.AddCircle(screenWidth / 2, screenHeight / 2, radius);

                using (SKPaint textPaint2 = new SKPaint()){
                    textPaint2.TextSize = 100;
                    float textWidth = textPaint2.MeasureText(text);
                    textPaint.TextSize *= 2 * 3.14f * radius / textWidth;
                    textPaint.Color = SKColors.Green;

                    screen.DrawTextOnPath(text, circularPath, 0, 0, textPaint);
                }
            }

            // Draw Italic text
            using (SKPaint italicText = new SKPaint()){
                SKFontStyle fontStyle = new SKFontStyle();
                italicText.Color = SKColors.Yellow;
                italicText.IsAntialias = true;
                italicText.StrokeWidth = 2;
                italicText.Style = SKPaintStyle.Stroke;
                SKFont font2 = new SKFont(SKTypeface.Default, 12, 1, 0);
                font2.Size = 22;
                SKTextBlob textBlob = SKTextBlob.Create("ItalicFonts", font2);
                screen.DrawText(textBlob, 200, 200, italicText);
            }

            // Flush to screen
            var data = bitmap.Copy(SKColorType.Rgb565).Bytes;
            displayController.Flush(data);
            Thread.Sleep(1);
        }
      }
    }</code></pre>
  syntax:
    content: public class DisplayController
    content.vb: Public Class DisplayController
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: GHIElectronics.Endpoint.Devices.Display.DisplayController.#ctor(GHIElectronics.Endpoint.Devices.Display.IDisplayProvider)
  commentId: M:GHIElectronics.Endpoint.Devices.Display.DisplayController.#ctor(GHIElectronics.Endpoint.Devices.Display.IDisplayProvider)
  id: '#ctor(GHIElectronics.Endpoint.Devices.Display.IDisplayProvider)'
  parent: GHIElectronics.Endpoint.Devices.Display.DisplayController
  langs:
  - csharp
  - vb
  name: DisplayController(IDisplayProvider)
  nameWithType: DisplayController.DisplayController(IDisplayProvider)
  fullName: GHIElectronics.Endpoint.Devices.Display.DisplayController.DisplayController(GHIElectronics.Endpoint.Devices.Display.IDisplayProvider)
  type: Constructor
  source:
    remote:
      path: Dotnet/GHIElectronics.Endpoint.Libraries/GHIElectronics.Endpoint.Devices.Display/DisplayController.cs
      branch: main
      repo: https://github.com/ghi-electronics/Endpoint-Libraries.git
    id: .ctor
    path: ../Endpoint-Libraries/Dotnet/GHIElectronics.Endpoint.Libraries/GHIElectronics.Endpoint.Devices.Display/DisplayController.cs
    startLine: 224
  assemblies:
  - GHIElectronics.Endpoint.Devices.Display
  namespace: GHIElectronics.Endpoint.Devices.Display
  syntax:
    content: public DisplayController(IDisplayProvider display)
    parameters:
    - id: display
      type: GHIElectronics.Endpoint.Devices.Display.IDisplayProvider
    content.vb: Public Sub New(display As IDisplayProvider)
  overload: GHIElectronics.Endpoint.Devices.Display.DisplayController.#ctor*
  nameWithType.vb: DisplayController.New(IDisplayProvider)
  fullName.vb: GHIElectronics.Endpoint.Devices.Display.DisplayController.New(GHIElectronics.Endpoint.Devices.Display.IDisplayProvider)
  name.vb: New(IDisplayProvider)
- uid: GHIElectronics.Endpoint.Devices.Display.DisplayController.Configuration
  commentId: P:GHIElectronics.Endpoint.Devices.Display.DisplayController.Configuration
  id: Configuration
  parent: GHIElectronics.Endpoint.Devices.Display.DisplayController
  langs:
  - csharp
  - vb
  name: Configuration
  nameWithType: DisplayController.Configuration
  fullName: GHIElectronics.Endpoint.Devices.Display.DisplayController.Configuration
  type: Property
  source:
    remote:
      path: Dotnet/GHIElectronics.Endpoint.Libraries/GHIElectronics.Endpoint.Devices.Display/DisplayController.cs
      branch: main
      repo: https://github.com/ghi-electronics/Endpoint-Libraries.git
    id: Configuration
    path: ../Endpoint-Libraries/Dotnet/GHIElectronics.Endpoint.Libraries/GHIElectronics.Endpoint.Devices.Display/DisplayController.cs
    startLine: 226
  assemblies:
  - GHIElectronics.Endpoint.Devices.Display
  namespace: GHIElectronics.Endpoint.Devices.Display
  syntax:
    content: public DisplayConfiguration Configuration { get; }
    parameters: []
    return:
      type: GHIElectronics.Endpoint.Devices.Display.DisplayConfiguration
    content.vb: Public ReadOnly Property Configuration As DisplayConfiguration
  overload: GHIElectronics.Endpoint.Devices.Display.DisplayController.Configuration*
- uid: GHIElectronics.Endpoint.Devices.Display.DisplayController.Flush(System.Byte[])
  commentId: M:GHIElectronics.Endpoint.Devices.Display.DisplayController.Flush(System.Byte[])
  id: Flush(System.Byte[])
  parent: GHIElectronics.Endpoint.Devices.Display.DisplayController
  langs:
  - csharp
  - vb
  name: Flush(byte[])
  nameWithType: DisplayController.Flush(byte[])
  fullName: GHIElectronics.Endpoint.Devices.Display.DisplayController.Flush(byte[])
  type: Method
  source:
    remote:
      path: Dotnet/GHIElectronics.Endpoint.Libraries/GHIElectronics.Endpoint.Devices.Display/DisplayController.cs
      branch: main
      repo: https://github.com/ghi-electronics/Endpoint-Libraries.git
    id: Flush
    path: ../Endpoint-Libraries/Dotnet/GHIElectronics.Endpoint.Libraries/GHIElectronics.Endpoint.Devices.Display/DisplayController.cs
    startLine: 228
  assemblies:
  - GHIElectronics.Endpoint.Devices.Display
  namespace: GHIElectronics.Endpoint.Devices.Display
  syntax:
    content: public void Flush(byte[] data)
    parameters:
    - id: data
      type: System.Byte[]
    content.vb: Public Sub Flush(data As Byte())
  overload: GHIElectronics.Endpoint.Devices.Display.DisplayController.Flush*
  nameWithType.vb: DisplayController.Flush(Byte())
  fullName.vb: GHIElectronics.Endpoint.Devices.Display.DisplayController.Flush(Byte())
  name.vb: Flush(Byte())
- uid: GHIElectronics.Endpoint.Devices.Display.DisplayController.Flush(System.Byte[],System.Int32,System.Int32)
  commentId: M:GHIElectronics.Endpoint.Devices.Display.DisplayController.Flush(System.Byte[],System.Int32,System.Int32)
  id: Flush(System.Byte[],System.Int32,System.Int32)
  parent: GHIElectronics.Endpoint.Devices.Display.DisplayController
  langs:
  - csharp
  - vb
  name: Flush(byte[], int, int)
  nameWithType: DisplayController.Flush(byte[], int, int)
  fullName: GHIElectronics.Endpoint.Devices.Display.DisplayController.Flush(byte[], int, int)
  type: Method
  source:
    remote:
      path: Dotnet/GHIElectronics.Endpoint.Libraries/GHIElectronics.Endpoint.Devices.Display/DisplayController.cs
      branch: main
      repo: https://github.com/ghi-electronics/Endpoint-Libraries.git
    id: Flush
    path: ../Endpoint-Libraries/Dotnet/GHIElectronics.Endpoint.Libraries/GHIElectronics.Endpoint.Devices.Display/DisplayController.cs
    startLine: 229
  assemblies:
  - GHIElectronics.Endpoint.Devices.Display
  namespace: GHIElectronics.Endpoint.Devices.Display
  syntax:
    content: public void Flush(byte[] data, int offset, int length)
    parameters:
    - id: data
      type: System.Byte[]
    - id: offset
      type: System.Int32
    - id: length
      type: System.Int32
    content.vb: Public Sub Flush(data As Byte(), offset As Integer, length As Integer)
  overload: GHIElectronics.Endpoint.Devices.Display.DisplayController.Flush*
  nameWithType.vb: DisplayController.Flush(Byte(), Integer, Integer)
  fullName.vb: GHIElectronics.Endpoint.Devices.Display.DisplayController.Flush(Byte(), Integer, Integer)
  name.vb: Flush(Byte(), Integer, Integer)
- uid: GHIElectronics.Endpoint.Devices.Display.DisplayController.Flush(System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32)
  commentId: M:GHIElectronics.Endpoint.Devices.Display.DisplayController.Flush(System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32)
  id: Flush(System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32)
  parent: GHIElectronics.Endpoint.Devices.Display.DisplayController
  langs:
  - csharp
  - vb
  name: Flush(byte[], int, int, int, int)
  nameWithType: DisplayController.Flush(byte[], int, int, int, int)
  fullName: GHIElectronics.Endpoint.Devices.Display.DisplayController.Flush(byte[], int, int, int, int)
  type: Method
  source:
    remote:
      path: Dotnet/GHIElectronics.Endpoint.Libraries/GHIElectronics.Endpoint.Devices.Display/DisplayController.cs
      branch: main
      repo: https://github.com/ghi-electronics/Endpoint-Libraries.git
    id: Flush
    path: ../Endpoint-Libraries/Dotnet/GHIElectronics.Endpoint.Libraries/GHIElectronics.Endpoint.Devices.Display/DisplayController.cs
    startLine: 231
  assemblies:
  - GHIElectronics.Endpoint.Devices.Display
  namespace: GHIElectronics.Endpoint.Devices.Display
  syntax:
    content: public void Flush(byte[] data, int offset, int length, int width, int height)
    parameters:
    - id: data
      type: System.Byte[]
    - id: offset
      type: System.Int32
    - id: length
      type: System.Int32
    - id: width
      type: System.Int32
    - id: height
      type: System.Int32
    content.vb: Public Sub Flush(data As Byte(), offset As Integer, length As Integer, width As Integer, height As Integer)
  overload: GHIElectronics.Endpoint.Devices.Display.DisplayController.Flush*
  nameWithType.vb: DisplayController.Flush(Byte(), Integer, Integer, Integer, Integer)
  fullName.vb: GHIElectronics.Endpoint.Devices.Display.DisplayController.Flush(Byte(), Integer, Integer, Integer, Integer)
  name.vb: Flush(Byte(), Integer, Integer, Integer, Integer)
references:
- uid: GHIElectronics.Endpoint.Devices.Display
  commentId: N:GHIElectronics.Endpoint.Devices.Display
  href: GHIElectronics.html
  name: GHIElectronics.Endpoint.Devices.Display
  nameWithType: GHIElectronics.Endpoint.Devices.Display
  fullName: GHIElectronics.Endpoint.Devices.Display
  spec.csharp:
  - uid: GHIElectronics
    name: GHIElectronics
    href: GHIElectronics.html
  - name: .
  - uid: GHIElectronics.Endpoint
    name: Endpoint
    href: GHIElectronics.Endpoint.html
  - name: .
  - uid: GHIElectronics.Endpoint.Devices
    name: Devices
    href: GHIElectronics.Endpoint.Devices.html
  - name: .
  - uid: GHIElectronics.Endpoint.Devices.Display
    name: Display
    href: GHIElectronics.Endpoint.Devices.Display.html
  spec.vb:
  - uid: GHIElectronics
    name: GHIElectronics
    href: GHIElectronics.html
  - name: .
  - uid: GHIElectronics.Endpoint
    name: Endpoint
    href: GHIElectronics.Endpoint.html
  - name: .
  - uid: GHIElectronics.Endpoint.Devices
    name: Devices
    href: GHIElectronics.Endpoint.Devices.html
  - name: .
  - uid: GHIElectronics.Endpoint.Devices.Display
    name: Display
    href: GHIElectronics.Endpoint.Devices.Display.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: GHIElectronics.Endpoint.Devices.Display.DisplayController.#ctor*
  commentId: Overload:GHIElectronics.Endpoint.Devices.Display.DisplayController.#ctor
  href: GHIElectronics.Endpoint.Devices.Display.DisplayController.html#GHIElectronics_Endpoint_Devices_Display_DisplayController__ctor_GHIElectronics_Endpoint_Devices_Display_IDisplayProvider_
  name: DisplayController
  nameWithType: DisplayController.DisplayController
  fullName: GHIElectronics.Endpoint.Devices.Display.DisplayController.DisplayController
  nameWithType.vb: DisplayController.New
  fullName.vb: GHIElectronics.Endpoint.Devices.Display.DisplayController.New
  name.vb: New
- uid: GHIElectronics.Endpoint.Devices.Display.IDisplayProvider
  commentId: T:GHIElectronics.Endpoint.Devices.Display.IDisplayProvider
  parent: GHIElectronics.Endpoint.Devices.Display
  href: GHIElectronics.Endpoint.Devices.Display.IDisplayProvider.html
  name: IDisplayProvider
  nameWithType: IDisplayProvider
  fullName: GHIElectronics.Endpoint.Devices.Display.IDisplayProvider
- uid: GHIElectronics.Endpoint.Devices.Display.DisplayController.Configuration*
  commentId: Overload:GHIElectronics.Endpoint.Devices.Display.DisplayController.Configuration
  href: GHIElectronics.Endpoint.Devices.Display.DisplayController.html#GHIElectronics_Endpoint_Devices_Display_DisplayController_Configuration
  name: Configuration
  nameWithType: DisplayController.Configuration
  fullName: GHIElectronics.Endpoint.Devices.Display.DisplayController.Configuration
- uid: GHIElectronics.Endpoint.Devices.Display.DisplayConfiguration
  commentId: T:GHIElectronics.Endpoint.Devices.Display.DisplayConfiguration
  parent: GHIElectronics.Endpoint.Devices.Display
  href: GHIElectronics.Endpoint.Devices.Display.DisplayConfiguration.html
  name: DisplayConfiguration
  nameWithType: DisplayConfiguration
  fullName: GHIElectronics.Endpoint.Devices.Display.DisplayConfiguration
- uid: GHIElectronics.Endpoint.Devices.Display.DisplayController.Flush*
  commentId: Overload:GHIElectronics.Endpoint.Devices.Display.DisplayController.Flush
  href: GHIElectronics.Endpoint.Devices.Display.DisplayController.html#GHIElectronics_Endpoint_Devices_Display_DisplayController_Flush_System_Byte___
  name: Flush
  nameWithType: DisplayController.Flush
  fullName: GHIElectronics.Endpoint.Devices.Display.DisplayController.Flush
- uid: System.Byte[]
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.byte
  name: byte[]
  nameWithType: byte[]
  fullName: byte[]
  nameWithType.vb: Byte()
  fullName.vb: Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.Byte
    name: Byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: (
  - name: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
